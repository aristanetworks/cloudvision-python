# Copyright (c) 2020 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the COPYING file.

# complex key tests cases are specified via "complex" type where
# the map is specified as an array in format [<key>, <value>, <key>, <value>].
#
# map 32, array 32, bin 32 and ext 32 test cases are not provided
# as they are too big to fit. Those can be generated individually.
#
# i64 need to be provided as strings as some languages don't have int64 support by default.
---
tests:
  - name: boolean true
    bool: true
    out: [195]
  - name: boolean false
    bool: false
    out: [194]
  - name: nil
    nil: none
    out: [192]
  - name: zero int8
    i8: 0
    out: [0]
  - name: max int8
    i8: 127
    out: [127]
  - name: min int8
    i8: -128
    out: [208, 128]
  - name: zero int16
    i16: 0
    out: [0]
  - name: max int8 as int16
    i16: 127
    out: [127]
  - name: min int8 as int16
    i16: -128
    out: [208, 128]
  - name: max int16
    i16: 32767
    out: [205, 127, 255]
  - name: min int16
    i16: -32768
    out: [209, 128, 0]
  - name: max int16 as int32
    i32: 32767
    out: [205, 127, 255]
  - name: min int16 as int32
    i32: -32768
    out: [209, 128, 0]
  - name: zero int32
    i32: 0
    out: [0]
  - name: max int32
    i32: 2147483647
    out: [206, 127, 255, 255, 255]
  - name: min int32
    i32: -2147483648
    out: [210, 128, 0, 0, 0]
  - name: max int32 as int64
    i64: "2147483647"
    out: [206, 127, 255, 255, 255]
  - name: min int32 as int64
    i64: "-2147483648"
    out: [210, 128, 0, 0, 0]
  - name: zero int64
    i64: "0"
    out: [0]
  - name: max int64
    i64: "9223372036854775807"
    out: [207, 127, 255, 255, 255, 255, 255, 255, 255]
  - name: min int64
    i64: "-9223372036854775808"
    out: [211, 128, 0, 0, 0, 0, 0, 0, 0]
  - name: int8 42
    i8: 42
    out: [42]
  - name: int16 42
    i16: 42
    out: [42]
  - name: int32 42
    i8: 42
    out: [42]
  - name: int64 42
    i8: 42
    out: [42]
  - name: max int16 as int32
    i32: 32767
    out: [205, 127, 255]
  - name: min float
    f32: 1.175494351e-38
    out: [202, 0, 128, 0, 0]
  - name: zero float
    f32: 0
    out: [202, 0, 0, 0, 0]
  - name: max float
    f32: 3.402823466e+38
    out: [202, 127, 127, 255, 255]
  - name: min double
    f64: 2.2250738585072014e-308
    out: [203, 0, 16, 0, 0, 0, 0, 0, 0]
  - name: zero double
    f64: 0
    out: [203, 0, 0, 0, 0, 0, 0, 0, 0]
  - name: max double
    f64: 1.7976931348623158e+308
    out: [203, 127, 239, 255, 255, 255, 255, 255, 255]
  - name: positive int32
    i32: 32768
    out: [205, 128, 0]
  - name: positive int64
    i64: "32768"
    out: [205, 128, 0]
  - name: empty string
    str: ""
    out: [196, 0]
  - name: empty binary
    bytes: []
    out: [196, 0]
  - name: empty array
    array: []
    out: [144]
  - name: string array
    array: ["a", "b"]
    out: [146, 196, 1, 97, 196, 1, 98]
  - name: empty map
    map: {}
    out: [128]
  - name: sorted string map
    map: { "a": "b", "c": "d" }
    out: [130, 196, 1, 97, 196, 1, 98, 196, 1, 99, 196, 1, 100]
  - name: unsorted string map
    map: { "c": "d", "a": "b" }
    out: [130, 196, 1, 97, 196, 1, 98, 196, 1, 99, 196, 1, 100]
  - name: sorted string map to compare with JavaBean class marshal
    map: { "A": "b", "C": "d" }
    out: [130, 196, 1, 65, 196, 1, 98, 196, 1, 67, 196, 1, 100]
  - name: map with complex sorted map key
    complex:
      - { "a": "b", "c": "d" }
      - 42.0
    out: [129, 130, 196, 1, 97, 196, 1, 98, 196, 1, 99, 196, 1, 100, 203, 64, 69, 0, 0, 0, 0, 0, 0]
  - name: map with complex unsorted map key
    complex:
      - { "c": "d", "a": "b" }
      - 42.0
    out: [129, 130, 196, 1, 97, 196, 1, 98, 196, 1, 99, 196, 1, 100, 203, 64, 69, 0, 0, 0, 0, 0, 0]
  - name: map with double complex unsorted map key
    complex:
      - { "c": "d", "a": "b" }
      - 42.0
      - { "f": 666.0, "g": 777.0 }
      - 42.0
    out: [130, 130, 196, 1, 97, 196, 1, 98, 196, 1, 99, 196, 1, 100, 203, 64, 69, 0, 0, 0, 0, 0, 0, 130, 196, 1, 102, 203, 64, 132, 208, 0, 0, 0, 0, 0, 196, 1, 103, 203, 64, 136, 72, 0, 0, 0, 0, 0, 203, 64, 69, 0, 0, 0, 0, 0, 0]
  - name: map with complex unsorted map key an various value types
    complex:
      - { "c": "d", "a": "b" }
      - 34.0
      - { "c": "d" }
      - 1.5
      - { "p": 66.0 }
      - true
      - { "f": 66.0 }
      - null
    out: [132, 129, 196, 1, 99, 196, 1, 100, 203, 63, 248, 0, 0, 0, 0, 0, 0, 129, 196, 1, 102, 203, 64, 80, 128, 0, 0, 0, 0, 0, 192, 129, 196, 1, 112, 203, 64, 80, 128, 0, 0, 0, 0, 0, 195, 130, 196, 1, 97, 196, 1, 98, 196, 1, 99, 196, 1, 100, 203, 64, 65, 0, 0, 0, 0, 0, 0]
  - name: test lexicographic sorting for keys
    complex:
      - { "aaaaaaaaaaaaaaaaaaaaaaaaa": "aaaaaaaaaaaaaaaaaaaaaaaaaa" }
      - true
      - { "a": "a", "b": "b"}
      - true
    out: [130, 129, 196, 25, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 196, 26, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 195, 130, 196, 1, 97, 196, 1, 97, 196, 1, 98, 196, 1, 98, 195]
  - name: empty pointer (fixext1)
    pointer: []
    out: [212, 0, 144]
  - name: fixext 2
    pointer: [true]
    out: [213, 0, 145, 195]
  - name: fixext 4
    pointer: [true, true, true]
    out: [214, 0, 147, 195, 195, 195]
  - name: fixext 8
    pointer: [true, true, true, true, true, true, true]
    out: [215, 0, 151, 195, 195, 195, 195, 195, 195, 195]
  - name: fixext 16
    pointer: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]
    out: [216, 0, 159, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195]
  - name: ext 8 3 bytes payload
    pointer: [true, true]
    out: [199, 3, 0, 146, 195, 195]
  - name: ext 8 5 bytes payload
    pointer: [true, true, true, true]
    out: [199, 5, 0, 148, 195, 195, 195, 195]
  - name: ext 8 9 bytes payload
    pointer: [true, true, true, true, true, true, true, true]
    out: [199, 9, 0, 152, 195, 195, 195, 195, 195, 195, 195, 195]
  - name: ext 8 17 bytes payload
    pointer: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]
    out: [199, 19, 0, 220, 0, 16, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195]
  - name: ext 16
    pointer: ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]
    out: [200, 1, 4, 0, 145, 197, 1, 0, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97]
  - name: pointer same as array to make sure encoded differently
    pointer: ["a", "b"]
    out: [199, 7, 0, 146, 196, 1, 97, 196, 1, 98]
  - name: fixmap
    map: { "A": "b", "C": "d" }
    out: [130, 196, 1, 65, 196, 1, 98, 196, 1, 67, 196, 1, 100]
  - name: map 16
    map: {"0":"","1":"","10":"","100":"","101":"","102":"","103":"","104":"","105":"","106":"","107":"","108":"","109":"","11":"","110":"","111":"","112":"","113":"","114":"","115":"","116":"","117":"","118":"","119":"","12":"","120":"","121":"","122":"","123":"","124":"","125":"","126":"","127":"","128":"","129":"","13":"","130":"","131":"","132":"","133":"","134":"","135":"","136":"","137":"","138":"","139":"","14":"","140":"","141":"","142":"","143":"","144":"","145":"","146":"","147":"","148":"","149":"","15":"","150":"","151":"","152":"","153":"","154":"","155":"","156":"","157":"","158":"","159":"","16":"","160":"","161":"","162":"","163":"","164":"","165":"","166":"","167":"","168":"","169":"","17":"","170":"","171":"","172":"","173":"","174":"","175":"","176":"","177":"","178":"","179":"","18":"","180":"","181":"","182":"","183":"","184":"","185":"","186":"","187":"","188":"","189":"","19":"","190":"","191":"","192":"","193":"","194":"","195":"","196":"","197":"","198":"","199":"","2":"","20":"","200":"","201":"","202":"","203":"","204":"","205":"","206":"","207":"","208":"","209":"","21":"","210":"","211":"","212":"","213":"","214":"","215":"","216":"","217":"","218":"","219":"","22":"","220":"","221":"","222":"","223":"","224":"","225":"","226":"","227":"","228":"","229":"","23":"","230":"","231":"","232":"","233":"","234":"","235":"","236":"","237":"","238":"","239":"","24":"","240":"","241":"","242":"","243":"","244":"","245":"","246":"","247":"","248":"","249":"","25":"","250":"","251":"","252":"","253":"","254":"","255":"","26":"","27":"","28":"","29":"","3":"","30":"","31":"","32":"","33":"","34":"","35":"","36":"","37":"","38":"","39":"","4":"","40":"","41":"","42":"","43":"","44":"","45":"","46":"","47":"","48":"","49":"","5":"","50":"","51":"","52":"","53":"","54":"","55":"","56":"","57":"","58":"","59":"","6":"","60":"","61":"","62":"","63":"","64":"","65":"","66":"","67":"","68":"","69":"","7":"","70":"","71":"","72":"","73":"","74":"","75":"","76":"","77":"","78":"","79":"","8":"","80":"","81":"","82":"","83":"","84":"","85":"","86":"","87":"","88":"","89":"","9":"","90":"","91":"","92":"","93":"","94":"","95":"","96":"","97":"","98":"","99":""}
    out: [222, 1, 0, 196, 1, 48, 196, 0, 196, 1, 49, 196, 0, 196, 1, 50, 196, 0, 196, 1, 51, 196, 0, 196, 1, 52, 196, 0, 196, 1, 53, 196, 0, 196, 1, 54, 196, 0, 196, 1, 55, 196, 0, 196, 1, 56, 196, 0, 196, 1, 57, 196, 0, 196, 2, 49, 48, 196, 0, 196, 2, 49, 49, 196, 0, 196, 2, 49, 50, 196, 0, 196, 2, 49, 51, 196, 0, 196, 2, 49, 52, 196, 0, 196, 2, 49, 53, 196, 0, 196, 2, 49, 54, 196, 0, 196, 2, 49, 55, 196, 0, 196, 2, 49, 56, 196, 0, 196, 2, 49, 57, 196, 0, 196, 2, 50, 48, 196, 0, 196, 2, 50, 49, 196, 0, 196, 2, 50, 50, 196, 0, 196, 2, 50, 51, 196, 0, 196, 2, 50, 52, 196, 0, 196, 2, 50, 53, 196, 0, 196, 2, 50, 54, 196, 0, 196, 2, 50, 55, 196, 0, 196, 2, 50, 56, 196, 0, 196, 2, 50, 57, 196, 0, 196, 2, 51, 48, 196, 0, 196, 2, 51, 49, 196, 0, 196, 2, 51, 50, 196, 0, 196, 2, 51, 51, 196, 0, 196, 2, 51, 52, 196, 0, 196, 2, 51, 53, 196, 0, 196, 2, 51, 54, 196, 0, 196, 2, 51, 55, 196, 0, 196, 2, 51, 56, 196, 0, 196, 2, 51, 57, 196, 0, 196, 2, 52, 48, 196, 0, 196, 2, 52, 49, 196, 0, 196, 2, 52, 50, 196, 0, 196, 2, 52, 51, 196, 0, 196, 2, 52, 52, 196, 0, 196, 2, 52, 53, 196, 0, 196, 2, 52, 54, 196, 0, 196, 2, 52, 55, 196, 0, 196, 2, 52, 56, 196, 0, 196, 2, 52, 57, 196, 0, 196, 2, 53, 48, 196, 0, 196, 2, 53, 49, 196, 0, 196, 2, 53, 50, 196, 0, 196, 2, 53, 51, 196, 0, 196, 2, 53, 52, 196, 0, 196, 2, 53, 53, 196, 0, 196, 2, 53, 54, 196, 0, 196, 2, 53, 55, 196, 0, 196, 2, 53, 56, 196, 0, 196, 2, 53, 57, 196, 0, 196, 2, 54, 48, 196, 0, 196, 2, 54, 49, 196, 0, 196, 2, 54, 50, 196, 0, 196, 2, 54, 51, 196, 0, 196, 2, 54, 52, 196, 0, 196, 2, 54, 53, 196, 0, 196, 2, 54, 54, 196, 0, 196, 2, 54, 55, 196, 0, 196, 2, 54, 56, 196, 0, 196, 2, 54, 57, 196, 0, 196, 2, 55, 48, 196, 0, 196, 2, 55, 49, 196, 0, 196, 2, 55, 50, 196, 0, 196, 2, 55, 51, 196, 0, 196, 2, 55, 52, 196, 0, 196, 2, 55, 53, 196, 0, 196, 2, 55, 54, 196, 0, 196, 2, 55, 55, 196, 0, 196, 2, 55, 56, 196, 0, 196, 2, 55, 57, 196, 0, 196, 2, 56, 48, 196, 0, 196, 2, 56, 49, 196, 0, 196, 2, 56, 50, 196, 0, 196, 2, 56, 51, 196, 0, 196, 2, 56, 52, 196, 0, 196, 2, 56, 53, 196, 0, 196, 2, 56, 54, 196, 0, 196, 2, 56, 55, 196, 0, 196, 2, 56, 56, 196, 0, 196, 2, 56, 57, 196, 0, 196, 2, 57, 48, 196, 0, 196, 2, 57, 49, 196, 0, 196, 2, 57, 50, 196, 0, 196, 2, 57, 51, 196, 0, 196, 2, 57, 52, 196, 0, 196, 2, 57, 53, 196, 0, 196, 2, 57, 54, 196, 0, 196, 2, 57, 55, 196, 0, 196, 2, 57, 56, 196, 0, 196, 2, 57, 57, 196, 0, 196, 3, 49, 48, 48, 196, 0, 196, 3, 49, 48, 49, 196, 0, 196, 3, 49, 48, 50, 196, 0, 196, 3, 49, 48, 51, 196, 0, 196, 3, 49, 48, 52, 196, 0, 196, 3, 49, 48, 53, 196, 0, 196, 3, 49, 48, 54, 196, 0, 196, 3, 49, 48, 55, 196, 0, 196, 3, 49, 48, 56, 196, 0, 196, 3, 49, 48, 57, 196, 0, 196, 3, 49, 49, 48, 196, 0, 196, 3, 49, 49, 49, 196, 0, 196, 3, 49, 49, 50, 196, 0, 196, 3, 49, 49, 51, 196, 0, 196, 3, 49, 49, 52, 196, 0, 196, 3, 49, 49, 53, 196, 0, 196, 3, 49, 49, 54, 196, 0, 196, 3, 49, 49, 55, 196, 0, 196, 3, 49, 49, 56, 196, 0, 196, 3, 49, 49, 57, 196, 0, 196, 3, 49, 50, 48, 196, 0, 196, 3, 49, 50, 49, 196, 0, 196, 3, 49, 50, 50, 196, 0, 196, 3, 49, 50, 51, 196, 0, 196, 3, 49, 50, 52, 196, 0, 196, 3, 49, 50, 53, 196, 0, 196, 3, 49, 50, 54, 196, 0, 196, 3, 49, 50, 55, 196, 0, 196, 3, 49, 50, 56, 196, 0, 196, 3, 49, 50, 57, 196, 0, 196, 3, 49, 51, 48, 196, 0, 196, 3, 49, 51, 49, 196, 0, 196, 3, 49, 51, 50, 196, 0, 196, 3, 49, 51, 51, 196, 0, 196, 3, 49, 51, 52, 196, 0, 196, 3, 49, 51, 53, 196, 0, 196, 3, 49, 51, 54, 196, 0, 196, 3, 49, 51, 55, 196, 0, 196, 3, 49, 51, 56, 196, 0, 196, 3, 49, 51, 57, 196, 0, 196, 3, 49, 52, 48, 196, 0, 196, 3, 49, 52, 49, 196, 0, 196, 3, 49, 52, 50, 196, 0, 196, 3, 49, 52, 51, 196, 0, 196, 3, 49, 52, 52, 196, 0, 196, 3, 49, 52, 53, 196, 0, 196, 3, 49, 52, 54, 196, 0, 196, 3, 49, 52, 55, 196, 0, 196, 3, 49, 52, 56, 196, 0, 196, 3, 49, 52, 57, 196, 0, 196, 3, 49, 53, 48, 196, 0, 196, 3, 49, 53, 49, 196, 0, 196, 3, 49, 53, 50, 196, 0, 196, 3, 49, 53, 51, 196, 0, 196, 3, 49, 53, 52, 196, 0, 196, 3, 49, 53, 53, 196, 0, 196, 3, 49, 53, 54, 196, 0, 196, 3, 49, 53, 55, 196, 0, 196, 3, 49, 53, 56, 196, 0, 196, 3, 49, 53, 57, 196, 0, 196, 3, 49, 54, 48, 196, 0, 196, 3, 49, 54, 49, 196, 0, 196, 3, 49, 54, 50, 196, 0, 196, 3, 49, 54, 51, 196, 0, 196, 3, 49, 54, 52, 196, 0, 196, 3, 49, 54, 53, 196, 0, 196, 3, 49, 54, 54, 196, 0, 196, 3, 49, 54, 55, 196, 0, 196, 3, 49, 54, 56, 196, 0, 196, 3, 49, 54, 57, 196, 0, 196, 3, 49, 55, 48, 196, 0, 196, 3, 49, 55, 49, 196, 0, 196, 3, 49, 55, 50, 196, 0, 196, 3, 49, 55, 51, 196, 0, 196, 3, 49, 55, 52, 196, 0, 196, 3, 49, 55, 53, 196, 0, 196, 3, 49, 55, 54, 196, 0, 196, 3, 49, 55, 55, 196, 0, 196, 3, 49, 55, 56, 196, 0, 196, 3, 49, 55, 57, 196, 0, 196, 3, 49, 56, 48, 196, 0, 196, 3, 49, 56, 49, 196, 0, 196, 3, 49, 56, 50, 196, 0, 196, 3, 49, 56, 51, 196, 0, 196, 3, 49, 56, 52, 196, 0, 196, 3, 49, 56, 53, 196, 0, 196, 3, 49, 56, 54, 196, 0, 196, 3, 49, 56, 55, 196, 0, 196, 3, 49, 56, 56, 196, 0, 196, 3, 49, 56, 57, 196, 0, 196, 3, 49, 57, 48, 196, 0, 196, 3, 49, 57, 49, 196, 0, 196, 3, 49, 57, 50, 196, 0, 196, 3, 49, 57, 51, 196, 0, 196, 3, 49, 57, 52, 196, 0, 196, 3, 49, 57, 53, 196, 0, 196, 3, 49, 57, 54, 196, 0, 196, 3, 49, 57, 55, 196, 0, 196, 3, 49, 57, 56, 196, 0, 196, 3, 49, 57, 57, 196, 0, 196, 3, 50, 48, 48, 196, 0, 196, 3, 50, 48, 49, 196, 0, 196, 3, 50, 48, 50, 196, 0, 196, 3, 50, 48, 51, 196, 0, 196, 3, 50, 48, 52, 196, 0, 196, 3, 50, 48, 53, 196, 0, 196, 3, 50, 48, 54, 196, 0, 196, 3, 50, 48, 55, 196, 0, 196, 3, 50, 48, 56, 196, 0, 196, 3, 50, 48, 57, 196, 0, 196, 3, 50, 49, 48, 196, 0, 196, 3, 50, 49, 49, 196, 0, 196, 3, 50, 49, 50, 196, 0, 196, 3, 50, 49, 51, 196, 0, 196, 3, 50, 49, 52, 196, 0, 196, 3, 50, 49, 53, 196, 0, 196, 3, 50, 49, 54, 196, 0, 196, 3, 50, 49, 55, 196, 0, 196, 3, 50, 49, 56, 196, 0, 196, 3, 50, 49, 57, 196, 0, 196, 3, 50, 50, 48, 196, 0, 196, 3, 50, 50, 49, 196, 0, 196, 3, 50, 50, 50, 196, 0, 196, 3, 50, 50, 51, 196, 0, 196, 3, 50, 50, 52, 196, 0, 196, 3, 50, 50, 53, 196, 0, 196, 3, 50, 50, 54, 196, 0, 196, 3, 50, 50, 55, 196, 0, 196, 3, 50, 50, 56, 196, 0, 196, 3, 50, 50, 57, 196, 0, 196, 3, 50, 51, 48, 196, 0, 196, 3, 50, 51, 49, 196, 0, 196, 3, 50, 51, 50, 196, 0, 196, 3, 50, 51, 51, 196, 0, 196, 3, 50, 51, 52, 196, 0, 196, 3, 50, 51, 53, 196, 0, 196, 3, 50, 51, 54, 196, 0, 196, 3, 50, 51, 55, 196, 0, 196, 3, 50, 51, 56, 196, 0, 196, 3, 50, 51, 57, 196, 0, 196, 3, 50, 52, 48, 196, 0, 196, 3, 50, 52, 49, 196, 0, 196, 3, 50, 52, 50, 196, 0, 196, 3, 50, 52, 51, 196, 0, 196, 3, 50, 52, 52, 196, 0, 196, 3, 50, 52, 53, 196, 0, 196, 3, 50, 52, 54, 196, 0, 196, 3, 50, 52, 55, 196, 0, 196, 3, 50, 52, 56, 196, 0, 196, 3, 50, 52, 57, 196, 0, 196, 3, 50, 53, 48, 196, 0, 196, 3, 50, 53, 49, 196, 0, 196, 3, 50, 53, 50, 196, 0, 196, 3, 50, 53, 51, 196, 0, 196, 3, 50, 53, 52, 196, 0, 196, 3, 50, 53, 53, 196, 0]
  - name: fixarray
    array: ["a", "b", "c"]
    out: [147, 196, 1, 97, 196, 1, 98, 196, 1, 99]
  - name: array 16
    array: ["a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a"]
    out: [220, 1, 0, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97, 196, 1, 97]
  - name: bin 8
    str: "str"
    out: [196, 3, 115, 116, 114]
  - name: bin 16
    str: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    out: [197, 1, 0, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97]
