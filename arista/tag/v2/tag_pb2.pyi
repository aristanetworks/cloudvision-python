"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ElementType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ElementTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElementType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELEMENT_TYPE_UNSPECIFIED: _ElementType.ValueType  # 0
    """ELEMENT_TYPE_UNSPECIFIED is the default value."""

    ELEMENT_TYPE_DEVICE: _ElementType.ValueType  # 1
    """ELEMENT_TYPE_DEVICE is used for device tags."""

    ELEMENT_TYPE_INTERFACE: _ElementType.ValueType  # 2
    """ELEMENT_TYPE_INTERFACE is used for interface tags."""

class ElementType(_ElementType, metaclass=_ElementTypeEnumTypeWrapper):
    """ElementType enumerates the types of network elements that can
    be associated with tags.
    """
    pass

ELEMENT_TYPE_UNSPECIFIED: ElementType.ValueType  # 0
"""ELEMENT_TYPE_UNSPECIFIED is the default value."""

ELEMENT_TYPE_DEVICE: ElementType.ValueType  # 1
"""ELEMENT_TYPE_DEVICE is used for device tags."""

ELEMENT_TYPE_INTERFACE: ElementType.ValueType  # 2
"""ELEMENT_TYPE_INTERFACE is used for interface tags."""

global___ElementType = ElementType


class _ElementSubType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ElementSubTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElementSubType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELEMENT_SUB_TYPE_UNSPECIFIED: _ElementSubType.ValueType  # 0
    """ELEMENT_SUB_TYPE_UNSPECIFIED is the default value."""

    ELEMENT_SUB_TYPE_DEVICE: _ElementSubType.ValueType  # 1
    """ELEMENT_SUB_TYPE_DEVICE is used for EOS or
    third-party devices discovered via LLDP/SNMP.
    """

    ELEMENT_SUB_TYPE_VDS: _ElementSubType.ValueType  # 2
    """ELEMENT_SUB_TYPE_VDS is used for VMWare vSphere Distributed Switch (VDS) tags."""

    ELEMENT_SUB_TYPE_WORKLOAD_SERVER: _ElementSubType.ValueType  # 3
    """ELEMENT_SUB_TYPE_WORKLOAD_SERVER is used for workload server
    tags (such as VMWare ESXi host).
    A workload server is a server/data storage device on which
    the hypervisor is installed.
    """

    ELEMENT_SUB_TYPE_VM: _ElementSubType.ValueType  # 4
    """ELEMENT_SUB_TYPE_VM is used for VM tags.
    A VM is a software computer that, like a physical computer,
    runs an operating system and applications.
    """

class ElementSubType(_ElementSubType, metaclass=_ElementSubTypeEnumTypeWrapper):
    """ElementSubType enumerates the sub-types of network elements that can
    be associated with tags.
    """
    pass

ELEMENT_SUB_TYPE_UNSPECIFIED: ElementSubType.ValueType  # 0
"""ELEMENT_SUB_TYPE_UNSPECIFIED is the default value."""

ELEMENT_SUB_TYPE_DEVICE: ElementSubType.ValueType  # 1
"""ELEMENT_SUB_TYPE_DEVICE is used for EOS or
third-party devices discovered via LLDP/SNMP.
"""

ELEMENT_SUB_TYPE_VDS: ElementSubType.ValueType  # 2
"""ELEMENT_SUB_TYPE_VDS is used for VMWare vSphere Distributed Switch (VDS) tags."""

ELEMENT_SUB_TYPE_WORKLOAD_SERVER: ElementSubType.ValueType  # 3
"""ELEMENT_SUB_TYPE_WORKLOAD_SERVER is used for workload server
tags (such as VMWare ESXi host).
A workload server is a server/data storage device on which
the hypervisor is installed.
"""

ELEMENT_SUB_TYPE_VM: ElementSubType.ValueType  # 4
"""ELEMENT_SUB_TYPE_VM is used for VM tags.
A VM is a software computer that, like a physical computer,
runs an operating system and applications.
"""

global___ElementSubType = ElementSubType


class _CreatorType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _CreatorTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CreatorType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    CREATOR_TYPE_UNSPECIFIED: _CreatorType.ValueType  # 0
    """CREATOR_TYPE_UNSPECIFIED is the default value."""

    CREATOR_TYPE_SYSTEM: _CreatorType.ValueType  # 1
    """CREATOR_TYPE_SYSTEM is used for system tags."""

    CREATOR_TYPE_USER: _CreatorType.ValueType  # 2
    """CREATOR_TYPE_USER is used for user tags."""

    CREATOR_TYPE_EXTERNAL: _CreatorType.ValueType  # 3
    """CREATOR_TYPE_EXTERNAL is used for tags created from external sources.
    For E.g., vCenter
    """

class CreatorType(_CreatorType, metaclass=_CreatorTypeEnumTypeWrapper):
    """CreatorType enumerates the types of entities that can create
    a tag.
    """
    pass

CREATOR_TYPE_UNSPECIFIED: CreatorType.ValueType  # 0
"""CREATOR_TYPE_UNSPECIFIED is the default value."""

CREATOR_TYPE_SYSTEM: CreatorType.ValueType  # 1
"""CREATOR_TYPE_SYSTEM is used for system tags."""

CREATOR_TYPE_USER: CreatorType.ValueType  # 2
"""CREATOR_TYPE_USER is used for user tags."""

CREATOR_TYPE_EXTERNAL: CreatorType.ValueType  # 3
"""CREATOR_TYPE_EXTERNAL is used for tags created from external sources.
For E.g., vCenter
"""

global___CreatorType = CreatorType


class TagKey(google.protobuf.message.Message):
    """TagKey uniquely identifies a tag."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WORKSPACE_ID_FIELD_NUMBER: builtins.int
    ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    ELEMENT_SUB_TYPE_FIELD_NUMBER: builtins.int
    @property
    def workspace_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """workspace_id is the ID of a workspace. The special ID ""
        identifies the location where merged tags reside.
        """
        pass
    element_type: global___ElementType.ValueType
    """element_type is the category of network element to which
    this tag can be assigned.
    """

    @property
    def label(self) -> google.protobuf.wrappers_pb2.StringValue:
        """label is an arbitrary label."""
        pass
    @property
    def value(self) -> google.protobuf.wrappers_pb2.StringValue:
        """value is an arbitrary value."""
        pass
    element_sub_type: global___ElementSubType.ValueType
    """element_sub_type is the sub-category of network element
    to which this tag can be assigned.
    """

    def __init__(self,
        *,
        workspace_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        element_type: global___ElementType.ValueType = ...,
        label: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        value: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        element_sub_type: global___ElementSubType.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["label",b"label","value",b"value","workspace_id",b"workspace_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["element_sub_type",b"element_sub_type","element_type",b"element_type","label",b"label","value",b"value","workspace_id",b"workspace_id"]) -> None: ...
global___TagKey = TagKey

class TagConfig(google.protobuf.message.Message):
    """TagConfig holds a configuration for a user tag.
    The tags that belong to entities other than ELEMENT_SUB_TYPE_DEVICE
    will always be present in mainline only.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    REMOVE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___TagKey:
        """key identifies a tag. The special workspace ID "" for
        merged tags should not be set here.
        """
        pass
    @property
    def remove(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """remove indicates whether to remove (true) or add (false,
        unset) the tag identified by the key if the encompassing
        workspace merges.
        """
        pass
    def __init__(self,
        *,
        key: typing.Optional[global___TagKey] = ...,
        remove: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key","remove",b"remove"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","remove",b"remove"]) -> None: ...
global___TagConfig = TagConfig

class Tag(google.protobuf.message.Message):
    """Tag holds a merge-preview or the existing merged state (if the
    workspace ID is "") of a tag.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    CREATOR_TYPE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___TagKey:
        """key identifies a tag."""
        pass
    creator_type: global___CreatorType.ValueType
    """creator_type is the creator type of the tag."""

    def __init__(self,
        *,
        key: typing.Optional[global___TagKey] = ...,
        creator_type: global___CreatorType.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["creator_type",b"creator_type","key",b"key"]) -> None: ...
global___Tag = Tag

class TagAssignmentKey(google.protobuf.message.Message):
    """TagAssignmentKey uniquely identifies an assignment between
    a tag and a network element.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WORKSPACE_ID_FIELD_NUMBER: builtins.int
    ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    DEVICE_ID_FIELD_NUMBER: builtins.int
    INTERFACE_ID_FIELD_NUMBER: builtins.int
    ELEMENT_SUB_TYPE_FIELD_NUMBER: builtins.int
    @property
    def workspace_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """workspace_id is the ID of a workspace. The special ID ""
        identifies the location where merged assignments reside.
        """
        pass
    element_type: global___ElementType.ValueType
    """element_type is the element type of a tag. What should
    be set per element type:

    ELEMENT_TYPE_DEVICE: device_id
    ELEMENT_TYPE_INTERFACE: device_id, interface_id
    """

    @property
    def label(self) -> google.protobuf.wrappers_pb2.StringValue:
        """label is the label of a tag."""
        pass
    @property
    def value(self) -> google.protobuf.wrappers_pb2.StringValue:
        """value is the value of a tag."""
        pass
    @property
    def device_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """device_id identifies a device."""
        pass
    @property
    def interface_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """interface_id identifies an interface on a device."""
        pass
    element_sub_type: global___ElementSubType.ValueType
    """element_sub_type is the element sub-type of a tag."""

    def __init__(self,
        *,
        workspace_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        element_type: global___ElementType.ValueType = ...,
        label: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        value: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        device_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        interface_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        element_sub_type: global___ElementSubType.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["device_id",b"device_id","interface_id",b"interface_id","label",b"label","value",b"value","workspace_id",b"workspace_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["device_id",b"device_id","element_sub_type",b"element_sub_type","element_type",b"element_type","interface_id",b"interface_id","label",b"label","value",b"value","workspace_id",b"workspace_id"]) -> None: ...
global___TagAssignmentKey = TagAssignmentKey

class TagAssignmentConfig(google.protobuf.message.Message):
    """TagAssignmentConfig holds a configuration for an assignment
    between a tag and a network element.
    The tag assignments that belong to entities other than ELEMENT_SUB_TYPE_DEVICE
    will always be present in mainline only.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    REMOVE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___TagAssignmentKey:
        """key identifies an assignment. The special workspace ID ""
        for merged assignments should not be set here.
        """
        pass
    @property
    def remove(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """remove indicates whether to remove (true) or add (false,
        unset) the assignment identified by the key if the
        encompassing workspace merges.
        """
        pass
    def __init__(self,
        *,
        key: typing.Optional[global___TagAssignmentKey] = ...,
        remove: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key","remove",b"remove"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","remove",b"remove"]) -> None: ...
global___TagAssignmentConfig = TagAssignmentConfig

class TagAssignment(google.protobuf.message.Message):
    """TagAssignment holds a merge-preview or the existing merged
    state (if the workspace ID is "") of an assignment between
    a tag and a network element.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    TAG_CREATOR_TYPE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___TagAssignmentKey:
        """key identifies an assignment."""
        pass
    tag_creator_type: global___CreatorType.ValueType
    """tag_creator_type is the creator type of the tag
    involved in the assignment.
    """

    def __init__(self,
        *,
        key: typing.Optional[global___TagAssignmentKey] = ...,
        tag_creator_type: global___CreatorType.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","tag_creator_type",b"tag_creator_type"]) -> None: ...
global___TagAssignment = TagAssignment
