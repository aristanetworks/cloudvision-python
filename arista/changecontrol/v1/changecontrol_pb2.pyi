"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import fmp.wrappers_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _StageStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _StageStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_StageStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    STAGE_STATUS_UNSPECIFIED: _StageStatus.ValueType  # 0
    STAGE_STATUS_RUNNING: _StageStatus.ValueType  # 1
    """STAGE_STATUS_RUNNING means the stage has begun execution."""

    STAGE_STATUS_COMPLETED: _StageStatus.ValueType  # 2
    """STAGE_STATUS_COMPLETED means the stage has ceased execution.
    Success/failure of a stage cannot be inferred from this status
    alone but rather this status plus the stage error. That is, no
    error implies success and some error implies failure.
    """

    STAGE_STATUS_NOT_STARTED: _StageStatus.ValueType  # 3
    """STAGE_STATUS_NOT_STARTED means the stage has not been started."""

class StageStatus(_StageStatus, metaclass=_StageStatusEnumTypeWrapper):
    """StageStatus defines the possible execution statuses of a stage."""
    pass

STAGE_STATUS_UNSPECIFIED: StageStatus.ValueType  # 0
STAGE_STATUS_RUNNING: StageStatus.ValueType  # 1
"""STAGE_STATUS_RUNNING means the stage has begun execution."""

STAGE_STATUS_COMPLETED: StageStatus.ValueType  # 2
"""STAGE_STATUS_COMPLETED means the stage has ceased execution.
Success/failure of a stage cannot be inferred from this status
alone but rather this status plus the stage error. That is, no
error implies success and some error implies failure.
"""

STAGE_STATUS_NOT_STARTED: StageStatus.ValueType  # 3
"""STAGE_STATUS_NOT_STARTED means the stage has not been started."""

global___StageStatus = StageStatus


class _ChangeControlStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ChangeControlStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ChangeControlStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    CHANGE_CONTROL_STATUS_UNSPECIFIED: _ChangeControlStatus.ValueType  # 0
    CHANGE_CONTROL_STATUS_RUNNING: _ChangeControlStatus.ValueType  # 1
    """CHANGE_CONTROL_STATUS_RUNNING means the change control has begun
    execution.
    """

    CHANGE_CONTROL_STATUS_COMPLETED: _ChangeControlStatus.ValueType  # 2
    """CHANGE_CONTROL_STATUS_COMPLETED means the change control has ceased
    execution. Success/failure of a change control cannot be inferred
    from this status alone but rather this status plus the change control
    error. That is, no error implies success and some error implies failure.
    """

    CHANGE_CONTROL_STATUS_SCHEDULED: _ChangeControlStatus.ValueType  # 3
    """CHANGE_CONTROL_STATUS_SCHEDULED means the change control has been
    scheduled for execution at some time. Any failure that occurs during
    this process will cause a transition back to the unspecified status,
    a reset of the schedule flag by the system, and an error on the change
    control reporting the details of the failure.
    """

    CHANGE_CONTROL_STATUS_NOT_STARTED: _ChangeControlStatus.ValueType  # 4
    """CHANGE_CONTROL_STATUS_NOT_STARTED means the change control has not been
    started. This would include approved and not approved change controls.
    """

class ChangeControlStatus(_ChangeControlStatus, metaclass=_ChangeControlStatusEnumTypeWrapper):
    """ChangeControlStatus defines the possible execution statuses of
    a change control.
    """
    pass

CHANGE_CONTROL_STATUS_UNSPECIFIED: ChangeControlStatus.ValueType  # 0
CHANGE_CONTROL_STATUS_RUNNING: ChangeControlStatus.ValueType  # 1
"""CHANGE_CONTROL_STATUS_RUNNING means the change control has begun
execution.
"""

CHANGE_CONTROL_STATUS_COMPLETED: ChangeControlStatus.ValueType  # 2
"""CHANGE_CONTROL_STATUS_COMPLETED means the change control has ceased
execution. Success/failure of a change control cannot be inferred
from this status alone but rather this status plus the change control
error. That is, no error implies success and some error implies failure.
"""

CHANGE_CONTROL_STATUS_SCHEDULED: ChangeControlStatus.ValueType  # 3
"""CHANGE_CONTROL_STATUS_SCHEDULED means the change control has been
scheduled for execution at some time. Any failure that occurs during
this process will cause a transition back to the unspecified status,
a reset of the schedule flag by the system, and an error on the change
control reporting the details of the failure.
"""

CHANGE_CONTROL_STATUS_NOT_STARTED: ChangeControlStatus.ValueType  # 4
"""CHANGE_CONTROL_STATUS_NOT_STARTED means the change control has not been
started. This would include approved and not approved change controls.
"""

global___ChangeControlStatus = ChangeControlStatus


class RepeatedRepeatedString(google.protobuf.message.Message):
    """RepeatedRepeatedString wraps a repeated `fmp.RepeatedString`
    to define a string matrix which is used to represent stage
    rows (see `StageConfig`).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[fmp.wrappers_pb2.RepeatedString]:
        """values is a list of `fmp.RepeatedString`."""
        pass
    def __init__(self,
        *,
        values: typing.Optional[typing.Iterable[fmp.wrappers_pb2.RepeatedString]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["values",b"values"]) -> None: ...
global___RepeatedRepeatedString = RepeatedRepeatedString

class ChangeControlKey(google.protobuf.message.Message):
    """ChangeControlKey uniquely identifies a change control."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """id is the ID of the change control."""
        pass
    def __init__(self,
        *,
        id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id",b"id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id"]) -> None: ...
global___ChangeControlKey = ChangeControlKey

class Action(google.protobuf.message.Message):
    """Action is an action to perform during the execution of
    a stage of a change control. Available actions can be
    fetched using the "action" services.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    TIMEOUT_FIELD_NUMBER: builtins.int
    ARGS_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue:
        """name is the name of the action."""
        pass
    @property
    def timeout(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """timeout is the maximum duration in seconds that
        the action can execute before timing out. If this
        is not set, then this is interpreted to mean there
        is no timeout.
        """
        pass
    @property
    def args(self) -> fmp.wrappers_pb2.MapStringString:
        """args are the arguments of the action."""
        pass
    def __init__(self,
        *,
        name: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        timeout: typing.Optional[google.protobuf.wrappers_pb2.UInt32Value] = ...,
        args: typing.Optional[fmp.wrappers_pb2.MapStringString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["args",b"args","name",b"name","timeout",b"timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["args",b"args","name",b"name","timeout",b"timeout"]) -> None: ...
global___Action = Action

class StageConfig(google.protobuf.message.Message):
    """StageConfig holds a configuration for a stage in a change
    control. Each stage generally defines either an action
    or a series of sub-stages.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    ACTION_FIELD_NUMBER: builtins.int
    ROWS_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue:
        """name is the name of the stage."""
        pass
    @property
    def action(self) -> global___Action:
        """action is the action to perform on stage execution."""
        pass
    @property
    def rows(self) -> global___RepeatedRepeatedString:
        """rows is a series of rows of parallel stages referenced
        by ID. Each row is run one after the other and the
        stages within each row are run in parallel.

        For example:

        ```
        [["1a", "1b"], ["2"]]
        ```

        This configures stage 1a and stage 1b to run at the
        same time, and then stage 2 once both of them have
        completed.
        """
        pass
    def __init__(self,
        *,
        name: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        action: typing.Optional[global___Action] = ...,
        rows: typing.Optional[global___RepeatedRepeatedString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["action",b"action","name",b"name","rows",b"rows"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action",b"action","name",b"name","rows",b"rows"]) -> None: ...
global___StageConfig = StageConfig

class StageConfigMap(google.protobuf.message.Message):
    """StageConfigMap wraps a map from stage ID to `StageConfig`.
    This defines the configuration and order of execution
    for the stages in a change control.

    For example:

    ```
    {
        "root": { name: "root", rows: [["1-2"], ["3"]] },
        "1-2":  { name: "stages 1-2", rows: [["1"], ["2"]] },
        "1":    { name: "stage 1", rows: [["1a", "1b"]] },
        "1a":   { name: "stage 1a", action: { name: "task", args: { "TaskID": "101" } },
        "1b":   { name: "stage 1b", action: { name: "task", args: { "TaskID": "102" } },
        "2":    { name: "stage 2", action: { name: "task", args: { "TaskID": "103" } },
        "3":    { name: "stage 3", action: { name: "task", args: { "TaskID": "104" } }
    }
    ```

    Assuming the root stage ID of the enclosing change control
    is "root", this would mean to do the following in sequence:

    ```
    root
    |- stages 1-2
    |  |- stage 1
    |  |  |- stage 1a, stage 1b (parallel)
    |  |- stage 2
    |- stage 3
    ```

    That is, execute tasks `101` and `102` in parallel, then task `103`, then task `104`.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class ValuesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___StageConfig: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___StageConfig] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___StageConfig]:
        """values is a map from stage ID to `StageConfig`."""
        pass
    def __init__(self,
        *,
        values: typing.Optional[typing.Mapping[typing.Text, global___StageConfig]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["values",b"values"]) -> None: ...
global___StageConfigMap = StageConfigMap

class ChangeConfig(google.protobuf.message.Message):
    """ChangeConfig holds a configuration for the change of a change
    control which is essentially a named configuration of stages.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    ROOT_STAGE_ID_FIELD_NUMBER: builtins.int
    STAGES_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue:
        """name is the name of the change."""
        pass
    @property
    def root_stage_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """root_stage_id is the ID of the root stage or the stage that
        should execute first.
        """
        pass
    @property
    def stages(self) -> global___StageConfigMap:
        """stages holds a configuration of stages. See `StageConfigMap`
        description for more information.
        """
        pass
    @property
    def notes(self) -> google.protobuf.wrappers_pb2.StringValue:
        """notes are any notes associated with the change."""
        pass
    def __init__(self,
        *,
        name: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        root_stage_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        stages: typing.Optional[global___StageConfigMap] = ...,
        notes: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["name",b"name","notes",b"notes","root_stage_id",b"root_stage_id","stages",b"stages"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","notes",b"notes","root_stage_id",b"root_stage_id","stages",b"stages"]) -> None: ...
global___ChangeConfig = ChangeConfig

class FlagConfig(google.protobuf.message.Message):
    """FlagConfig is used to set a flag on a change control that takes
    a boolean value (e.g. start/stop, approve/unapprove).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """value is the value of the flag (`true` or `false`)."""
        pass
    @property
    def notes(self) -> google.protobuf.wrappers_pb2.StringValue:
        """notes are any notes associated with the flag value."""
        pass
    def __init__(self,
        *,
        value: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        notes: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["notes",b"notes","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["notes",b"notes","value",b"value"]) -> None: ...
global___FlagConfig = FlagConfig

class TimestampFlagConfig(google.protobuf.message.Message):
    """TimestampFlagConfig is used to set a flag on a change control
    that takes a timestamp value (e.g. schedule/unschedule).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """value is the value of the flag (some timestamp)."""
        pass
    @property
    def notes(self) -> google.protobuf.wrappers_pb2.StringValue:
        """notes are the notes associated with the flag value."""
        pass
    def __init__(self,
        *,
        value: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        notes: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["notes",b"notes","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["notes",b"notes","value",b"value"]) -> None: ...
global___TimestampFlagConfig = TimestampFlagConfig

class ChangeControlConfig(google.protobuf.message.Message):
    """ChangeControlConfig holds the configuration of a change control."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    CHANGE_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    SCHEDULE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___ChangeControlKey:
        """key uniquely identifies the change control."""
        pass
    @property
    def change(self) -> global___ChangeConfig:
        """change is the change subject to execution."""
        pass
    @property
    def start(self) -> global___FlagConfig:
        """start is the flag to start (`start.value` set to `true`)
        or stop (`start.value` set to `false`) execution of the
        change control.
        """
        pass
    @property
    def schedule(self) -> global___TimestampFlagConfig:
        """schedule is the flag to schedule (`schedule.value` set to
        some timestamp) or unschedule (`schedule.value` set to
        `nil`) the change control for execution.
        """
        pass
    def __init__(self,
        *,
        key: typing.Optional[global___ChangeControlKey] = ...,
        change: typing.Optional[global___ChangeConfig] = ...,
        start: typing.Optional[global___FlagConfig] = ...,
        schedule: typing.Optional[global___TimestampFlagConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["change",b"change","key",b"key","schedule",b"schedule","start",b"start"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["change",b"change","key",b"key","schedule",b"schedule","start",b"start"]) -> None: ...
global___ChangeControlConfig = ChangeControlConfig

class Stage(google.protobuf.message.Message):
    """Stage holds the configuration and status of a stage."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    ACTION_FIELD_NUMBER: builtins.int
    ROWS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue:
        """name is the name of the stage."""
        pass
    @property
    def action(self) -> global___Action:
        """action is the action to perform during the stage."""
        pass
    @property
    def rows(self) -> global___RepeatedRepeatedString:
        """rows is a series of rows of parallel stages referenced
        by ID. See `StageConfig.rows` for more details.
        """
        pass
    status: global___StageStatus.ValueType
    """status is the execution status of the stage."""

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """error is any error that occured during the execution
        of the stage.
        """
        pass
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """start_time is the time when status change to Running"""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """end_time is the time when status change to Completed"""
        pass
    def __init__(self,
        *,
        name: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        action: typing.Optional[global___Action] = ...,
        rows: typing.Optional[global___RepeatedRepeatedString] = ...,
        status: global___StageStatus.ValueType = ...,
        error: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        start_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["action",b"action","end_time",b"end_time","error",b"error","name",b"name","rows",b"rows","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action",b"action","end_time",b"end_time","error",b"error","name",b"name","rows",b"rows","start_time",b"start_time","status",b"status"]) -> None: ...
global___Stage = Stage

class StageMap(google.protobuf.message.Message):
    """StageMap is a map from stage ID to `Stage`. This has essentially
    the same structure as `StageConfigMap`, but with each ID mapping
    to a `Stage` instead of `StageConfig`.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class ValuesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Stage: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Stage] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Stage]:
        """values is a map from stage ID to `Stage`."""
        pass
    def __init__(self,
        *,
        values: typing.Optional[typing.Mapping[typing.Text, global___Stage]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["values",b"values"]) -> None: ...
global___StageMap = StageMap

class Change(google.protobuf.message.Message):
    """Change holds the configuration and status of the change of a
    change control.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    ROOT_STAGE_ID_FIELD_NUMBER: builtins.int
    STAGES_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue:
        """name is the name of the change."""
        pass
    @property
    def root_stage_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """root_stage_id is the ID of the root stage or the stage that
        should execute first.
        """
        pass
    @property
    def stages(self) -> global___StageMap:
        """stages holds a configuration of stages and their statuses."""
        pass
    @property
    def notes(self) -> google.protobuf.wrappers_pb2.StringValue:
        """notes are any notes associated with the change."""
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """time is the time at which the change was last updated."""
        pass
    @property
    def user(self) -> google.protobuf.wrappers_pb2.StringValue:
        """user is the user by which the change was last updated."""
        pass
    def __init__(self,
        *,
        name: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        root_stage_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        stages: typing.Optional[global___StageMap] = ...,
        notes: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        user: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["name",b"name","notes",b"notes","root_stage_id",b"root_stage_id","stages",b"stages","time",b"time","user",b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","notes",b"notes","root_stage_id",b"root_stage_id","stages",b"stages","time",b"time","user",b"user"]) -> None: ...
global___Change = Change

class Flag(google.protobuf.message.Message):
    """Flag holds the configuration of a boolean flag plus some
    information about when and by whom it was set.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """value is the value of the flag (`true` or `false`)."""
        pass
    @property
    def notes(self) -> google.protobuf.wrappers_pb2.StringValue:
        """notes are any notes associated with the setting of the flag."""
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """time is the time at which the flag was last updated."""
        pass
    @property
    def user(self) -> google.protobuf.wrappers_pb2.StringValue:
        """user is the user by which the flag was last updated."""
        pass
    def __init__(self,
        *,
        value: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        notes: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        user: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["notes",b"notes","time",b"time","user",b"user","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["notes",b"notes","time",b"time","user",b"user","value",b"value"]) -> None: ...
global___Flag = Flag

class TimestampFlag(google.protobuf.message.Message):
    """TimestampFlag holds the configuration of a timestamp flag
    plus some information about when and by whom is was set.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """value is the value of the flag (some timestamp)."""
        pass
    @property
    def notes(self) -> google.protobuf.wrappers_pb2.StringValue:
        """notes are any notes associated with the setting of the flag."""
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """time is the time at which the flag was last updated."""
        pass
    @property
    def user(self) -> google.protobuf.wrappers_pb2.StringValue:
        """user is the user by which the flag was last updated."""
        pass
    def __init__(self,
        *,
        value: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        notes: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        user: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["notes",b"notes","time",b"time","user",b"user","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["notes",b"notes","time",b"time","user",b"user","value",b"value"]) -> None: ...
global___TimestampFlag = TimestampFlag

class Filter(google.protobuf.message.Message):
    """Filter is used to filter changecontrols for requested device ids."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DEVICE_IDS_FIELD_NUMBER: builtins.int
    @property
    def device_ids(self) -> fmp.wrappers_pb2.RepeatedString:
        """device_ids includes the list of device ids to be matched with devices
        in the changecontrol state model.
        At least one of the provided device ids must be present in CC devices field.
        """
        pass
    def __init__(self,
        *,
        device_ids: typing.Optional[fmp.wrappers_pb2.RepeatedString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["device_ids",b"device_ids"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["device_ids",b"device_ids"]) -> None: ...
global___Filter = Filter

class ChangeControl(google.protobuf.message.Message):
    """ChangeControl holds the configuration and status of a change control."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    CHANGE_FIELD_NUMBER: builtins.int
    APPROVE_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    SCHEDULE_FIELD_NUMBER: builtins.int
    DEVICE_IDS_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___ChangeControlKey:
        """key uniquely identifies the change control."""
        pass
    @property
    def change(self) -> global___Change:
        """change holds the configuration and status of the change of
        the change control.
        """
        pass
    @property
    def approve(self) -> global___Flag:
        """approve indicates whether the change control was flagged
        as approved (`approve.value` set to `true`) or unapproved
        (`approve.value` set to `false`).
        """
        pass
    @property
    def start(self) -> global___Flag:
        """start indicates whether the change control was flagged to
        start (`start.value` set to `true`) or stop (`start.value`
        set to `false`) execution.
        """
        pass
    status: global___ChangeControlStatus.ValueType
    """status is the execution status of the change control."""

    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """error is any error that occurred during the execution of the
        change control.
        """
        pass
    @property
    def schedule(self) -> global___TimestampFlag:
        """schedule indicates whether the change control was flagged
        to be scheduled (`schedule.value` set to some timestamp) or
        unscheduled (`schedule.value` set to `nil`) for execution.
        """
        pass
    @property
    def device_ids(self) -> fmp.wrappers_pb2.RepeatedString:
        """device_ids is a list of device IDs on which the change control will operate."""
        pass
    def __init__(self,
        *,
        key: typing.Optional[global___ChangeControlKey] = ...,
        change: typing.Optional[global___Change] = ...,
        approve: typing.Optional[global___Flag] = ...,
        start: typing.Optional[global___Flag] = ...,
        status: global___ChangeControlStatus.ValueType = ...,
        error: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        schedule: typing.Optional[global___TimestampFlag] = ...,
        device_ids: typing.Optional[fmp.wrappers_pb2.RepeatedString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["approve",b"approve","change",b"change","device_ids",b"device_ids","error",b"error","key",b"key","schedule",b"schedule","start",b"start"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["approve",b"approve","change",b"change","device_ids",b"device_ids","error",b"error","key",b"key","schedule",b"schedule","start",b"start","status",b"status"]) -> None: ...
global___ChangeControl = ChangeControl

class ApproveConfig(google.protobuf.message.Message):
    """ApproveConfig is used to configure the approval of a change control."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    APPROVE_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___ChangeControlKey:
        """key uniquely identifies the change control."""
        pass
    @property
    def approve(self) -> global___FlagConfig:
        """approve is the flag to approve (`approve.value` set to `true`)
        or unapprove (`approve.value` set to `false`) the change control.
        """
        pass
    @property
    def version(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """version is the timestamp of the change control to approve.
        This field must be set when `approve.value` is set to `true`
        and is intended to safeguard against approving a change control
        that has been updated since last read.
        """
        pass
    def __init__(self,
        *,
        key: typing.Optional[global___ChangeControlKey] = ...,
        approve: typing.Optional[global___FlagConfig] = ...,
        version: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["approve",b"approve","key",b"key","version",b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["approve",b"approve","key",b"key","version",b"version"]) -> None: ...
global___ApproveConfig = ApproveConfig
