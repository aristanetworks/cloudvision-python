"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import arista.connectivitymonitor.v1.connectivitymonitor_pb2
import arista.subscriptions.subscriptions_pb2
import arista.time.time_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class MetaResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of the last item included in the metadata calculation."""
        pass
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """

    @property
    def count(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Count is the number of items present under the conditions of the request."""
        pass
    def __init__(self,
        *,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
        count: typing.Optional[google.protobuf.wrappers_pb2.UInt32Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["count",b"count","time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["count",b"count","time",b"time","type",b"type"]) -> None: ...
global___MetaResponse = MetaResponse

class ProbeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeKey:
        """Key uniquely identifies a Probe instance to retrieve.
        This value must be populated.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """
        pass
    def __init__(self,
        *,
        key: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeKey] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key","time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","time",b"time"]) -> None: ...
global___ProbeRequest = ProbeRequest

class ProbeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        Probe instance in this response.
        """
        pass
    def __init__(self,
        *,
        value: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["time",b"time","value",b"value"]) -> None: ...
global___ProbeResponse = ProbeResponse

class ProbeSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """
        pass
    def __init__(self,
        *,
        keys: typing.Optional[typing.Iterable[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeKey]] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["keys",b"keys","time",b"time"]) -> None: ...
global___ProbeSomeRequest = ProbeSomeRequest

class ProbeSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """
        pass
    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(self,
        *,
        value: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe] = ...,
        error: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error",b"error","time",b"time","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error",b"error","time",b"time","value",b"value"]) -> None: ...
global___ProbeSomeResponse = ProbeSomeResponse

class ProbeStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """
        pass
    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each Probe at end.
            * Each Probe response is fully-specified (all fields set).
          * start: Returns the state of each Probe at start, followed by updates until now.
            * Each Probe response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each Probe at start, followed by updates
            until end.
            * Each Probe response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """
        pass
    def __init__(self,
        *,
        partial_eq_filter: typing.Optional[typing.Iterable[arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe]] = ...,
        time: typing.Optional[arista.time.time_pb2.TimeBounds] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["partial_eq_filter",b"partial_eq_filter","time",b"time"]) -> None: ...
global___ProbeStreamRequest = ProbeStreamRequest

class ProbeStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this Probe's last modification."""
        pass
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the Probe value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """

    def __init__(self,
        *,
        value: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.Probe] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["time",b"time","type",b"type","value",b"value"]) -> None: ...
global___ProbeStreamResponse = ProbeStreamResponse

class ProbeStatsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStatsKey:
        """Key uniquely identifies a ProbeStats instance to retrieve.
        This value must be populated.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """
        pass
    def __init__(self,
        *,
        key: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStatsKey] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key","time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","time",b"time"]) -> None: ...
global___ProbeStatsRequest = ProbeStatsRequest

class ProbeStatsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time carries the (UTC) timestamp of the last-modification of the
        ProbeStats instance in this response.
        """
        pass
    def __init__(self,
        *,
        value: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["time",b"time","value",b"value"]) -> None: ...
global___ProbeStatsResponse = ProbeStatsResponse

class ProbeStatsSomeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEYS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStatsKey]: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time indicates the time for which you are interested in the data.
        If no time is given, the server will use the time at which it makes the request.
        """
        pass
    def __init__(self,
        *,
        keys: typing.Optional[typing.Iterable[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStatsKey]] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["keys",b"keys","time",b"time"]) -> None: ...
global___ProbeStatsSomeRequest = ProbeStatsSomeRequest

class ProbeStatsSomeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats:
        """Value is the value requested.
        This structure will be fully-populated as it exists in the datastore. If
        optional fields were not given at creation, these fields will be empty or
        set to default values.
        """
        pass
    @property
    def error(self) -> google.protobuf.wrappers_pb2.StringValue:
        """Error is an optional field.
        It should be filled when there is an error in the GetSome process.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(self,
        *,
        value: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats] = ...,
        error: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error",b"error","time",b"time","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error",b"error","time",b"time","value",b"value"]) -> None: ...
global___ProbeStatsSomeResponse = ProbeStatsSomeResponse

class ProbeStatsStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PARTIAL_EQ_FILTER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def partial_eq_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats]:
        """PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
        This requires all provided fields to be equal to the response.

        While transparent to users, this field also allows services to optimize internal
        subscriptions if filter(s) are sufficiently specific.
        """
        pass
    @property
    def time(self) -> arista.time.time_pb2.TimeBounds:
        """TimeRange allows limiting response data to within a specified time window.
        If this field is populated, at least one of the two time fields are required.

        For GetAll, the fields start and end can be used as follows:

          * end: Returns the state of each ProbeStats at end.
            * Each ProbeStats response is fully-specified (all fields set).
          * start: Returns the state of each ProbeStats at start, followed by updates until now.
            * Each ProbeStats response at start is fully-specified, but updates may be partial.
          * start and end: Returns the state of each ProbeStats at start, followed by updates
            until end.
            * Each ProbeStats response at start is fully-specified, but updates until end may
              be partial.

        This field is not allowed in the Subscribe RPC.
        """
        pass
    def __init__(self,
        *,
        partial_eq_filter: typing.Optional[typing.Iterable[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats]] = ...,
        time: typing.Optional[arista.time.time_pb2.TimeBounds] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["partial_eq_filter",b"partial_eq_filter","time",b"time"]) -> None: ...
global___ProbeStatsStreamRequest = ProbeStatsStreamRequest

class ProbeStatsStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats:
        """Value is a value deemed relevant to the initiating request.
        This structure will always have its key-field populated. Which other fields are
        populated, and why, depends on the value of Operation and what triggered this notification.
        """
        pass
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time holds the timestamp of this ProbeStats's last modification."""
        pass
    type: arista.subscriptions.subscriptions_pb2.Operation.ValueType
    """Operation indicates how the ProbeStats value in this response should be considered.
    Under non-subscribe requests, this value should always be INITIAL. In a subscription,
    once all initial data is streamed and the client begins to receive modification updates,
    you should not see INITIAL again.
    """

    def __init__(self,
        *,
        value: typing.Optional[arista.connectivitymonitor.v1.connectivitymonitor_pb2.ProbeStats] = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        type: arista.subscriptions.subscriptions_pb2.Operation.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["time",b"time","type",b"type","value",b"value"]) -> None: ...
global___ProbeStatsStreamResponse = ProbeStatsStreamResponse
