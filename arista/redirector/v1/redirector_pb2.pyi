"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import fmp.wrappers_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class AssignmentKey(google.protobuf.message.Message):
    """AssignmentKey allows to uniquely identify an assignment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SYSTEM_ID_FIELD_NUMBER: builtins.int
    @property
    def system_id(self) -> google.protobuf.wrappers_pb2.StringValue:
        """system_id is the unique identifier of a device."""
        pass
    def __init__(self,
        *,
        system_id: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["system_id",b"system_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["system_id",b"system_id"]) -> None: ...
global___AssignmentKey = AssignmentKey

class Assignment(google.protobuf.message.Message):
    """Assignment returns the information about the regional clusters that the
    system is assigned to. Each cluster consists of a series of hosts, each of
    which the client can use to connect.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    CLUSTERS_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___AssignmentKey:
        """key uniquely identifies the assignment of system_id to the cluster."""
        pass
    @property
    def clusters(self) -> global___Clusters:
        """clusters that the system is assigned to."""
        pass
    def __init__(self,
        *,
        key: typing.Optional[global___AssignmentKey] = ...,
        clusters: typing.Optional[global___Clusters] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clusters",b"clusters","key",b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clusters",b"clusters","key",b"key"]) -> None: ...
global___Assignment = Assignment

class Clusters(google.protobuf.message.Message):
    """Clusters wraps a cluster list which contain the information about the hosts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Cluster]:
        """values contains the list of clusters associated with the region"""
        pass
    def __init__(self,
        *,
        values: typing.Optional[typing.Iterable[global___Cluster]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["values",b"values"]) -> None: ...
global___Clusters = Clusters

class Cluster(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    HOSTS_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue:
        """name of the cluster. The name can change over time as new clusters
        are added or removed.
        """
        pass
    @property
    def hosts(self) -> fmp.wrappers_pb2.RepeatedString:
        """hosts in the cluster that the devices can connect to."""
        pass
    def __init__(self,
        *,
        name: typing.Optional[google.protobuf.wrappers_pb2.StringValue] = ...,
        hosts: typing.Optional[fmp.wrappers_pb2.RepeatedString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["hosts",b"hosts","name",b"name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["hosts",b"hosts","name",b"name"]) -> None: ...
global___Cluster = Cluster
