# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ca_pb2 as ca__pb2


class CertificateAuthorityStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Enroll = channel.unary_unary(
                '/CertificateAuthority/Enroll',
                request_serializer=ca__pb2.CSR.SerializeToString,
                response_deserializer=ca__pb2.CRT.FromString,
                )
        self.Reenroll = channel.unary_unary(
                '/CertificateAuthority/Reenroll',
                request_serializer=ca__pb2.CSR.SerializeToString,
                response_deserializer=ca__pb2.CRT.FromString,
                )


class CertificateAuthorityServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Enroll(self, request, context):
        """Enroll is called by client passing Certificate Signing Request (CSR)
        containing its personal certificate to be signed. The server returns
        back the certificate (CRT) to authenticate into IngestGateway or Router.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reenroll(self, request, context):
        """Reenroll is called by client passing Certificate Signing Request (CSR)
        when it wants to renew its personal certificate. The server returns
        a new certificate (CRT).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CertificateAuthorityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Enroll': grpc.unary_unary_rpc_method_handler(
                    servicer.Enroll,
                    request_deserializer=ca__pb2.CSR.FromString,
                    response_serializer=ca__pb2.CRT.SerializeToString,
            ),
            'Reenroll': grpc.unary_unary_rpc_method_handler(
                    servicer.Reenroll,
                    request_deserializer=ca__pb2.CSR.FromString,
                    response_serializer=ca__pb2.CRT.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CertificateAuthority', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CertificateAuthority(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Enroll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CertificateAuthority/Enroll',
            ca__pb2.CSR.SerializeToString,
            ca__pb2.CRT.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reenroll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CertificateAuthority/Reenroll',
            ca__pb2.CSR.SerializeToString,
            ca__pb2.CRT.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
