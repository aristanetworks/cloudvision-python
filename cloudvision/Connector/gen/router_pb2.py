# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: router.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import notification_pb2 as notification__pb2
import sharding_pb2 as sharding__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='router.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0crouter.proto\x1a\x12notification.proto\x1a\x0esharding.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"r\n\x04Path\x12\x18\n\x04type\x18\x01 \x01(\x0e\x32\n.Path.Type\x12\x0c\n\x04path\x18\x02 \x01(\t\x12\x0c\n\x04keys\x18\x03 \x03(\x0c\x12\x15\n\rpath_elements\x18\x04 \x03(\x0c\"\x1d\n\x04Type\x12\t\n\x05\x45XACT\x10\x00\x12\n\n\x06REGEXP\x10\x01\"8\n\x05Query\x12\x19\n\x07\x64\x61taset\x18\x01 \x01(\x0b\x32\x08.Dataset\x12\x14\n\x05paths\x18\x02 \x03(\x0b\x32\x05.Path\"I\n\x10SubscribeRequest\x12\x15\n\x05query\x18\x01 \x03(\x0b\x32\x06.Query\x12\x1e\n\x0bsharded_sub\x18\x02 \x01(\x0b\x32\t.Sharding\"\xca\x01\n\nGetRequest\x12\x15\n\x05query\x18\x01 \x03(\x0b\x32\x06.Query\x12\r\n\x05start\x18\x04 \x01(\x04\x12\x10\n\x08versions\x18\x05 \x01(\r\x12\x0b\n\x03\x65nd\x18\x03 \x01(\x04\x12\x13\n\x0b\x65xact_range\x18\x06 \x01(\x08\x12\x1e\n\x0bsharded_sub\x18\x07 \x01(\x0b\x32\t.Sharding\x12\x35\n\x14wildcard_expand_type\x18\x08 \x01(\x0e\x32\x17.PathWildCardExpandTypeJ\x04\x08\x02\x10\x03R\x05\x63ount\"\x85\x01\n\x16GetAndSubscribeRequest\x12\x15\n\x05query\x18\x01 \x03(\x0b\x32\x06.Query\x12\r\n\x05start\x18\x02 \x01(\x04\x12\x10\n\x08versions\x18\x03 \x01(\r\x12\x13\n\x0b\x65xact_range\x18\x04 \x01(\x08\x12\x1e\n\x0bsharded_sub\x18\x05 \x01(\x0b\x32\t.Sharding\"\x80\x02\n\rSearchRequest\x12\x0e\n\x06search\x18\x01 \x01(\t\x12(\n\x0bsearch_type\x18\x02 \x01(\x0e\x32\x13.SearchRequest.Type\x12\x15\n\x05query\x18\x03 \x03(\x0b\x32\x06.Query\x12\r\n\x05start\x18\x04 \x01(\x04\x12\x0b\n\x03\x65nd\x18\x05 \x01(\x04\x12\x12\n\ncount_only\x18\x06 \x01(\x08\x12\x1c\n\x0bkey_filters\x18\x07 \x03(\x0b\x32\x07.Filter\x12\x1e\n\rvalue_filters\x18\x08 \x03(\x0b\x32\x07.Filter\"0\n\x04Type\x12\n\n\x06STRING\x10\x00\x12\x07\n\x03MAC\x10\x01\x12\x06\n\x02IP\x10\x02\x12\x0b\n\x07\x43OMPLEX\x10\x03\"\xa2\x04\n\x06\x46ilter\x12\r\n\x05\x66ield\x18\x01 \x01(\t\x12\x1c\n\x02op\x18\x02 \x01(\x0e\x32\x10.Filter.Operator\x12\x1c\n\x05value\x18\x03 \x01(\x0b\x32\r.Filter.Value\x1a\xc5\x01\n\x05Value\x12\r\n\x03str\x18\x01 \x01(\tH\x00\x12\r\n\x03int\x18\x02 \x01(\x12H\x00\x12\x0e\n\x04uint\x18\x03 \x01(\x04H\x00\x12\x0f\n\x05\x66loat\x18\x04 \x01(\x01H\x00\x12\x0b\n\x01\x62\x18\x05 \x01(\x08H\x00\x12\x0c\n\x02ip\x18\x06 \x01(\tH\x00\x12\r\n\x03mac\x18\x07 \x01(\tH\x00\x12&\n\x04\x63omp\x18\x08 \x01(\x0b\x32\x16.Filter.ComponentValueH\x00\x12#\n\x05multi\x18\t \x01(\x0b\x32\x12.Filter.MultiValueH\x00\x42\x06\n\x04kind\x1ap\n\x0e\x43omponentValue\x12\x30\n\x05value\x18\x01 \x03(\x0b\x32!.Filter.ComponentValue.ValueEntry\x1a,\n\nValueEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a+\n\nMultiValue\x12\x1d\n\x06values\x18\x01 \x03(\x0b\x32\r.Filter.Value\"f\n\x08Operator\x12\x06\n\x02\x45Q\x10\x00\x12\x07\n\x03NEQ\x10\x01\x12\x06\n\x02GT\x10\x02\x12\x06\n\x02GE\x10\x03\x12\x06\n\x02LT\x10\x04\x12\x06\n\x02LE\x10\x05\x12\x06\n\x02RE\x10\x06\x12\x07\n\x03NRE\x10\x07\x12\x06\n\x02IN\x10\x08\x12\x07\n\x03NIN\x10\t\x12\x07\n\x03SUB\x10\n\"h\n\x0ePublishRequest\x12!\n\x05\x62\x61tch\x18\x01 \x01(\x0b\x32\x12.NotificationBatch\x12\x0c\n\x04sync\x18\x02 \x01(\x08\x12%\n\x07\x63ompare\x18\x03 \x01(\x0b\x32\x14.Notification.Update\" \n\x0f\x44\x61tasetsRequest\x12\r\n\x05types\x18\x01 \x03(\t\".\n\x10\x44\x61tasetsResponse\x12\x1a\n\x08\x64\x61tasets\x18\x01 \x03(\x0b\x32\x08.Dataset\"1\n\x14\x43reateDatasetRequest\x12\x19\n\x07\x64\x61taset\x18\x01 \x01(\x0b\x32\x08.Dataset\"\x83\x04\n\x14SetPermissionRequest\x12(\n\x04type\x18\x01 \x01(\x0e\x32\x1a.SetPermissionRequest.Type\x12\x19\n\x07\x64\x61taset\x18\x02 \x01(\x0b\x32\x08.Dataset\x12\x17\n\x05other\x18\x03 \x01(\x0b\x32\x08.Dataset\x12\x31\n\tpathPerms\x18\x06 \x03(\x0b\x32\x1e.SetPermissionRequest.PathPerm\x1a\xf4\x01\n\x08PathPerm\x12\x13\n\x04path\x18\x01 \x01(\x0b\x32\x05.Path\x12\x34\n\x07newPerm\x18\x02 \x01(\x0e\x32#.SetPermissionRequest.PathPerm.Perm\x12\x38\n\x0b\x63urrentPerm\x18\x03 \x01(\x0e\x32#.SetPermissionRequest.PathPerm.Perm\x12\x12\n\nexactMatch\x18\x04 \x01(\x08\"O\n\x04Perm\x12\x13\n\x0fNULL_PERM_VALUE\x10\x00\x12\r\n\tREAD_PERM\x10\x01\x12\x0e\n\nWRITE_PERM\x10\x02\x12\x13\n\x0fREAD_WRITE_PERM\x10\x03\"c\n\x04Type\x12\x13\n\x0fPATH_PERMISSION\x10\x00\x12\x16\n\x12INHERIT_PERMISSION\x10\x01\x12\x18\n\x14UNINHERIT_PERMISSION\x10\x02\x12\x14\n\x10\x41\x44MIN_PERMISSION\x10\x03\";\n\rPermissionSet\x12*\n\x0bpermissions\x18\x01 \x03(\x0b\x32\x15.SetPermissionRequest\"g\n\x12\x43lusterDescription\x12-\n\ttimestamp\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x13\n\x0b\x63lusterName\x18\x02 \x01(\t\x12\r\n\x05\x65poch\x18\x03 \x01(\r\"A\n\x12SetPasswordRequest\x12\x19\n\x07\x64\x61taset\x18\x01 \x01(\x0b\x32\x08.Dataset\x12\x10\n\x08password\x18\x02 \x01(\t\"1\n\x14\x43reateSessionRequest\x12\x19\n\x07\x64\x61taset\x18\x01 \x01(\x0b\x32\x08.Dataset\"9\n\x15\x43reateSessionResponse\x12\x10\n\x08jwtToken\x18\x01 \x01(\t\x12\x0e\n\x06\x65xpiry\x18\x02 \x01(\x03*\x94\x01\n\x16PathWildCardExpandType\x12\x1a\n\x16WILDCARD_EXPAND_LEGACY\x10\x00\x12\x1a\n\x16WILDCARD_EXPAND_LATEST\x10\x01\x12\x1f\n\x1bWILDCARD_EXPAND_EXACT_RANGE\x10\x02\x12!\n\x1dWILDCARD_EXPAND_RELAXED_RANGE\x10\x03\x32\x96\x02\n\x08RouterV1\x12\x32\n\x07Publish\x12\x0f.PublishRequest\x1a\x16.google.protobuf.Empty\x12\x34\n\tSubscribe\x12\x11.SubscribeRequest\x1a\x12.NotificationBatch0\x01\x12(\n\x03Get\x12\x0b.GetRequest\x1a\x12.NotificationBatch0\x01\x12@\n\x0fGetAndSubscribe\x12\x17.GetAndSubscribeRequest\x1a\x12.NotificationBatch0\x01\x12\x34\n\x0bGetDatasets\x12\x10.DatasetsRequest\x1a\x11.DatasetsResponse0\x01\x32\xb7\x02\n\x04\x41uth\x12>\n\rCreateDataset\x12\x15.CreateDatasetRequest\x1a\x16.google.protobuf.Empty\x12>\n\rSetPermission\x12\x15.SetPermissionRequest\x1a\x16.google.protobuf.Empty\x12\x31\n\x10GetPermissionSet\x12\x0b.GetRequest\x1a\x0e.PermissionSet0\x01\x12:\n\x0bSetPassword\x12\x13.SetPasswordRequest\x1a\x16.google.protobuf.Empty\x12@\n\rCreateSession\x12\x15.CreateSessionRequest\x1a\x16.CreateSessionResponse0\x01\x32p\n\x05\x41lpha\x12.\n\x06Search\x12\x0e.SearchRequest\x1a\x12.NotificationBatch0\x01\x12\x37\n\x0fSearchSubscribe\x12\x0e.SearchRequest\x1a\x12.NotificationBatch0\x01\x32G\n\x07\x43luster\x12<\n\x0b\x43lusterInfo\x12\x16.google.protobuf.Empty\x1a\x13.ClusterDescription0\x01\x42\x05Z\x03genb\x06proto3')
  ,
  dependencies=[notification__pb2.DESCRIPTOR,sharding__pb2.DESCRIPTOR,google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,google_dot_protobuf_dot_timestamp__pb2.DESCRIPTOR,])

_PATHWILDCARDEXPANDTYPE = _descriptor.EnumDescriptor(
  name='PathWildCardExpandType',
  full_name='PathWildCardExpandType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='WILDCARD_EXPAND_LEGACY', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WILDCARD_EXPAND_LATEST', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WILDCARD_EXPAND_EXACT_RANGE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WILDCARD_EXPAND_RELAXED_RANGE', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2613,
  serialized_end=2761,
)
_sym_db.RegisterEnumDescriptor(_PATHWILDCARDEXPANDTYPE)

PathWildCardExpandType = enum_type_wrapper.EnumTypeWrapper(_PATHWILDCARDEXPANDTYPE)
WILDCARD_EXPAND_LEGACY = 0
WILDCARD_EXPAND_LATEST = 1
WILDCARD_EXPAND_EXACT_RANGE = 2
WILDCARD_EXPAND_RELAXED_RANGE = 3


_PATH_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='Path.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='EXACT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REGEXP', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=199,
  serialized_end=228,
)
_sym_db.RegisterEnumDescriptor(_PATH_TYPE)

_SEARCHREQUEST_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='SearchRequest.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='STRING', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MAC', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IP', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='COMPLEX', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=913,
  serialized_end=961,
)
_sym_db.RegisterEnumDescriptor(_SEARCHREQUEST_TYPE)

_FILTER_OPERATOR = _descriptor.EnumDescriptor(
  name='Operator',
  full_name='Filter.Operator',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='EQ', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEQ', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GT', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LT', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RE', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NRE', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IN', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NIN', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUB', index=10, number=10,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1408,
  serialized_end=1510,
)
_sym_db.RegisterEnumDescriptor(_FILTER_OPERATOR)

_SETPERMISSIONREQUEST_PATHPERM_PERM = _descriptor.EnumDescriptor(
  name='Perm',
  full_name='SetPermissionRequest.PathPerm.Perm',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NULL_PERM_VALUE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='READ_PERM', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WRITE_PERM', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='READ_WRITE_PERM', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2087,
  serialized_end=2166,
)
_sym_db.RegisterEnumDescriptor(_SETPERMISSIONREQUEST_PATHPERM_PERM)

_SETPERMISSIONREQUEST_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='SetPermissionRequest.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PATH_PERMISSION', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INHERIT_PERMISSION', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNINHERIT_PERMISSION', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADMIN_PERMISSION', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2168,
  serialized_end=2267,
)
_sym_db.RegisterEnumDescriptor(_SETPERMISSIONREQUEST_TYPE)


_PATH = _descriptor.Descriptor(
  name='Path',
  full_name='Path',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='Path.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='Path.path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='keys', full_name='Path.keys', index=2,
      number=3, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path_elements', full_name='Path.path_elements', index=3,
      number=4, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _PATH_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=114,
  serialized_end=228,
)


_QUERY = _descriptor.Descriptor(
  name='Query',
  full_name='Query',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dataset', full_name='Query.dataset', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='paths', full_name='Query.paths', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=230,
  serialized_end=286,
)


_SUBSCRIBEREQUEST = _descriptor.Descriptor(
  name='SubscribeRequest',
  full_name='SubscribeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='query', full_name='SubscribeRequest.query', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sharded_sub', full_name='SubscribeRequest.sharded_sub', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=288,
  serialized_end=361,
)


_GETREQUEST = _descriptor.Descriptor(
  name='GetRequest',
  full_name='GetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='query', full_name='GetRequest.query', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start', full_name='GetRequest.start', index=1,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='versions', full_name='GetRequest.versions', index=2,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='GetRequest.end', index=3,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exact_range', full_name='GetRequest.exact_range', index=4,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sharded_sub', full_name='GetRequest.sharded_sub', index=5,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='wildcard_expand_type', full_name='GetRequest.wildcard_expand_type', index=6,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=364,
  serialized_end=566,
)


_GETANDSUBSCRIBEREQUEST = _descriptor.Descriptor(
  name='GetAndSubscribeRequest',
  full_name='GetAndSubscribeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='query', full_name='GetAndSubscribeRequest.query', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start', full_name='GetAndSubscribeRequest.start', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='versions', full_name='GetAndSubscribeRequest.versions', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exact_range', full_name='GetAndSubscribeRequest.exact_range', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sharded_sub', full_name='GetAndSubscribeRequest.sharded_sub', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=569,
  serialized_end=702,
)


_SEARCHREQUEST = _descriptor.Descriptor(
  name='SearchRequest',
  full_name='SearchRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='search', full_name='SearchRequest.search', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='search_type', full_name='SearchRequest.search_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='query', full_name='SearchRequest.query', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start', full_name='SearchRequest.start', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='SearchRequest.end', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='count_only', full_name='SearchRequest.count_only', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_filters', full_name='SearchRequest.key_filters', index=6,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value_filters', full_name='SearchRequest.value_filters', index=7,
      number=8, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SEARCHREQUEST_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=705,
  serialized_end=961,
)


_FILTER_VALUE = _descriptor.Descriptor(
  name='Value',
  full_name='Filter.Value',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='str', full_name='Filter.Value.str', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='int', full_name='Filter.Value.int', index=1,
      number=2, type=18, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uint', full_name='Filter.Value.uint', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='float', full_name='Filter.Value.float', index=3,
      number=4, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='b', full_name='Filter.Value.b', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ip', full_name='Filter.Value.ip', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mac', full_name='Filter.Value.mac', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='comp', full_name='Filter.Value.comp', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='multi', full_name='Filter.Value.multi', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='kind', full_name='Filter.Value.kind',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1050,
  serialized_end=1247,
)

_FILTER_COMPONENTVALUE_VALUEENTRY = _descriptor.Descriptor(
  name='ValueEntry',
  full_name='Filter.ComponentValue.ValueEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='Filter.ComponentValue.ValueEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='Filter.ComponentValue.ValueEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1317,
  serialized_end=1361,
)

_FILTER_COMPONENTVALUE = _descriptor.Descriptor(
  name='ComponentValue',
  full_name='Filter.ComponentValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Filter.ComponentValue.value', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_FILTER_COMPONENTVALUE_VALUEENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1249,
  serialized_end=1361,
)

_FILTER_MULTIVALUE = _descriptor.Descriptor(
  name='MultiValue',
  full_name='Filter.MultiValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='values', full_name='Filter.MultiValue.values', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1363,
  serialized_end=1406,
)

_FILTER = _descriptor.Descriptor(
  name='Filter',
  full_name='Filter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='field', full_name='Filter.field', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='op', full_name='Filter.op', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='Filter.value', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_FILTER_VALUE, _FILTER_COMPONENTVALUE, _FILTER_MULTIVALUE, ],
  enum_types=[
    _FILTER_OPERATOR,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=964,
  serialized_end=1510,
)


_PUBLISHREQUEST = _descriptor.Descriptor(
  name='PublishRequest',
  full_name='PublishRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='batch', full_name='PublishRequest.batch', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sync', full_name='PublishRequest.sync', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='compare', full_name='PublishRequest.compare', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1512,
  serialized_end=1616,
)


_DATASETSREQUEST = _descriptor.Descriptor(
  name='DatasetsRequest',
  full_name='DatasetsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='types', full_name='DatasetsRequest.types', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1618,
  serialized_end=1650,
)


_DATASETSRESPONSE = _descriptor.Descriptor(
  name='DatasetsResponse',
  full_name='DatasetsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='datasets', full_name='DatasetsResponse.datasets', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1652,
  serialized_end=1698,
)


_CREATEDATASETREQUEST = _descriptor.Descriptor(
  name='CreateDatasetRequest',
  full_name='CreateDatasetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dataset', full_name='CreateDatasetRequest.dataset', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1700,
  serialized_end=1749,
)


_SETPERMISSIONREQUEST_PATHPERM = _descriptor.Descriptor(
  name='PathPerm',
  full_name='SetPermissionRequest.PathPerm',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='SetPermissionRequest.PathPerm.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='newPerm', full_name='SetPermissionRequest.PathPerm.newPerm', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='currentPerm', full_name='SetPermissionRequest.PathPerm.currentPerm', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exactMatch', full_name='SetPermissionRequest.PathPerm.exactMatch', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SETPERMISSIONREQUEST_PATHPERM_PERM,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1922,
  serialized_end=2166,
)

_SETPERMISSIONREQUEST = _descriptor.Descriptor(
  name='SetPermissionRequest',
  full_name='SetPermissionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='SetPermissionRequest.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dataset', full_name='SetPermissionRequest.dataset', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='other', full_name='SetPermissionRequest.other', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pathPerms', full_name='SetPermissionRequest.pathPerms', index=3,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SETPERMISSIONREQUEST_PATHPERM, ],
  enum_types=[
    _SETPERMISSIONREQUEST_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1752,
  serialized_end=2267,
)


_PERMISSIONSET = _descriptor.Descriptor(
  name='PermissionSet',
  full_name='PermissionSet',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='permissions', full_name='PermissionSet.permissions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2269,
  serialized_end=2328,
)


_CLUSTERDESCRIPTION = _descriptor.Descriptor(
  name='ClusterDescription',
  full_name='ClusterDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ClusterDescription.timestamp', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='clusterName', full_name='ClusterDescription.clusterName', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='epoch', full_name='ClusterDescription.epoch', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2330,
  serialized_end=2433,
)


_SETPASSWORDREQUEST = _descriptor.Descriptor(
  name='SetPasswordRequest',
  full_name='SetPasswordRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dataset', full_name='SetPasswordRequest.dataset', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='SetPasswordRequest.password', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2435,
  serialized_end=2500,
)


_CREATESESSIONREQUEST = _descriptor.Descriptor(
  name='CreateSessionRequest',
  full_name='CreateSessionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dataset', full_name='CreateSessionRequest.dataset', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2502,
  serialized_end=2551,
)


_CREATESESSIONRESPONSE = _descriptor.Descriptor(
  name='CreateSessionResponse',
  full_name='CreateSessionResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='jwtToken', full_name='CreateSessionResponse.jwtToken', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='expiry', full_name='CreateSessionResponse.expiry', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2553,
  serialized_end=2610,
)

_PATH.fields_by_name['type'].enum_type = _PATH_TYPE
_PATH_TYPE.containing_type = _PATH
_QUERY.fields_by_name['dataset'].message_type = notification__pb2._DATASET
_QUERY.fields_by_name['paths'].message_type = _PATH
_SUBSCRIBEREQUEST.fields_by_name['query'].message_type = _QUERY
_SUBSCRIBEREQUEST.fields_by_name['sharded_sub'].message_type = sharding__pb2._SHARDING
_GETREQUEST.fields_by_name['query'].message_type = _QUERY
_GETREQUEST.fields_by_name['sharded_sub'].message_type = sharding__pb2._SHARDING
_GETREQUEST.fields_by_name['wildcard_expand_type'].enum_type = _PATHWILDCARDEXPANDTYPE
_GETANDSUBSCRIBEREQUEST.fields_by_name['query'].message_type = _QUERY
_GETANDSUBSCRIBEREQUEST.fields_by_name['sharded_sub'].message_type = sharding__pb2._SHARDING
_SEARCHREQUEST.fields_by_name['search_type'].enum_type = _SEARCHREQUEST_TYPE
_SEARCHREQUEST.fields_by_name['query'].message_type = _QUERY
_SEARCHREQUEST.fields_by_name['key_filters'].message_type = _FILTER
_SEARCHREQUEST.fields_by_name['value_filters'].message_type = _FILTER
_SEARCHREQUEST_TYPE.containing_type = _SEARCHREQUEST
_FILTER_VALUE.fields_by_name['comp'].message_type = _FILTER_COMPONENTVALUE
_FILTER_VALUE.fields_by_name['multi'].message_type = _FILTER_MULTIVALUE
_FILTER_VALUE.containing_type = _FILTER
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['str'])
_FILTER_VALUE.fields_by_name['str'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['int'])
_FILTER_VALUE.fields_by_name['int'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['uint'])
_FILTER_VALUE.fields_by_name['uint'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['float'])
_FILTER_VALUE.fields_by_name['float'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['b'])
_FILTER_VALUE.fields_by_name['b'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['ip'])
_FILTER_VALUE.fields_by_name['ip'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['mac'])
_FILTER_VALUE.fields_by_name['mac'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['comp'])
_FILTER_VALUE.fields_by_name['comp'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_VALUE.oneofs_by_name['kind'].fields.append(
  _FILTER_VALUE.fields_by_name['multi'])
_FILTER_VALUE.fields_by_name['multi'].containing_oneof = _FILTER_VALUE.oneofs_by_name['kind']
_FILTER_COMPONENTVALUE_VALUEENTRY.containing_type = _FILTER_COMPONENTVALUE
_FILTER_COMPONENTVALUE.fields_by_name['value'].message_type = _FILTER_COMPONENTVALUE_VALUEENTRY
_FILTER_COMPONENTVALUE.containing_type = _FILTER
_FILTER_MULTIVALUE.fields_by_name['values'].message_type = _FILTER_VALUE
_FILTER_MULTIVALUE.containing_type = _FILTER
_FILTER.fields_by_name['op'].enum_type = _FILTER_OPERATOR
_FILTER.fields_by_name['value'].message_type = _FILTER_VALUE
_FILTER_OPERATOR.containing_type = _FILTER
_PUBLISHREQUEST.fields_by_name['batch'].message_type = notification__pb2._NOTIFICATIONBATCH
_PUBLISHREQUEST.fields_by_name['compare'].message_type = notification__pb2._NOTIFICATION_UPDATE
_DATASETSRESPONSE.fields_by_name['datasets'].message_type = notification__pb2._DATASET
_CREATEDATASETREQUEST.fields_by_name['dataset'].message_type = notification__pb2._DATASET
_SETPERMISSIONREQUEST_PATHPERM.fields_by_name['path'].message_type = _PATH
_SETPERMISSIONREQUEST_PATHPERM.fields_by_name['newPerm'].enum_type = _SETPERMISSIONREQUEST_PATHPERM_PERM
_SETPERMISSIONREQUEST_PATHPERM.fields_by_name['currentPerm'].enum_type = _SETPERMISSIONREQUEST_PATHPERM_PERM
_SETPERMISSIONREQUEST_PATHPERM.containing_type = _SETPERMISSIONREQUEST
_SETPERMISSIONREQUEST_PATHPERM_PERM.containing_type = _SETPERMISSIONREQUEST_PATHPERM
_SETPERMISSIONREQUEST.fields_by_name['type'].enum_type = _SETPERMISSIONREQUEST_TYPE
_SETPERMISSIONREQUEST.fields_by_name['dataset'].message_type = notification__pb2._DATASET
_SETPERMISSIONREQUEST.fields_by_name['other'].message_type = notification__pb2._DATASET
_SETPERMISSIONREQUEST.fields_by_name['pathPerms'].message_type = _SETPERMISSIONREQUEST_PATHPERM
_SETPERMISSIONREQUEST_TYPE.containing_type = _SETPERMISSIONREQUEST
_PERMISSIONSET.fields_by_name['permissions'].message_type = _SETPERMISSIONREQUEST
_CLUSTERDESCRIPTION.fields_by_name['timestamp'].message_type = google_dot_protobuf_dot_timestamp__pb2._TIMESTAMP
_SETPASSWORDREQUEST.fields_by_name['dataset'].message_type = notification__pb2._DATASET
_CREATESESSIONREQUEST.fields_by_name['dataset'].message_type = notification__pb2._DATASET
DESCRIPTOR.message_types_by_name['Path'] = _PATH
DESCRIPTOR.message_types_by_name['Query'] = _QUERY
DESCRIPTOR.message_types_by_name['SubscribeRequest'] = _SUBSCRIBEREQUEST
DESCRIPTOR.message_types_by_name['GetRequest'] = _GETREQUEST
DESCRIPTOR.message_types_by_name['GetAndSubscribeRequest'] = _GETANDSUBSCRIBEREQUEST
DESCRIPTOR.message_types_by_name['SearchRequest'] = _SEARCHREQUEST
DESCRIPTOR.message_types_by_name['Filter'] = _FILTER
DESCRIPTOR.message_types_by_name['PublishRequest'] = _PUBLISHREQUEST
DESCRIPTOR.message_types_by_name['DatasetsRequest'] = _DATASETSREQUEST
DESCRIPTOR.message_types_by_name['DatasetsResponse'] = _DATASETSRESPONSE
DESCRIPTOR.message_types_by_name['CreateDatasetRequest'] = _CREATEDATASETREQUEST
DESCRIPTOR.message_types_by_name['SetPermissionRequest'] = _SETPERMISSIONREQUEST
DESCRIPTOR.message_types_by_name['PermissionSet'] = _PERMISSIONSET
DESCRIPTOR.message_types_by_name['ClusterDescription'] = _CLUSTERDESCRIPTION
DESCRIPTOR.message_types_by_name['SetPasswordRequest'] = _SETPASSWORDREQUEST
DESCRIPTOR.message_types_by_name['CreateSessionRequest'] = _CREATESESSIONREQUEST
DESCRIPTOR.message_types_by_name['CreateSessionResponse'] = _CREATESESSIONRESPONSE
DESCRIPTOR.enum_types_by_name['PathWildCardExpandType'] = _PATHWILDCARDEXPANDTYPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Path = _reflection.GeneratedProtocolMessageType('Path', (_message.Message,), dict(
  DESCRIPTOR = _PATH,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:Path)
  ))
_sym_db.RegisterMessage(Path)

Query = _reflection.GeneratedProtocolMessageType('Query', (_message.Message,), dict(
  DESCRIPTOR = _QUERY,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:Query)
  ))
_sym_db.RegisterMessage(Query)

SubscribeRequest = _reflection.GeneratedProtocolMessageType('SubscribeRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBEREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:SubscribeRequest)
  ))
_sym_db.RegisterMessage(SubscribeRequest)

GetRequest = _reflection.GeneratedProtocolMessageType('GetRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:GetRequest)
  ))
_sym_db.RegisterMessage(GetRequest)

GetAndSubscribeRequest = _reflection.GeneratedProtocolMessageType('GetAndSubscribeRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETANDSUBSCRIBEREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:GetAndSubscribeRequest)
  ))
_sym_db.RegisterMessage(GetAndSubscribeRequest)

SearchRequest = _reflection.GeneratedProtocolMessageType('SearchRequest', (_message.Message,), dict(
  DESCRIPTOR = _SEARCHREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:SearchRequest)
  ))
_sym_db.RegisterMessage(SearchRequest)

Filter = _reflection.GeneratedProtocolMessageType('Filter', (_message.Message,), dict(

  Value = _reflection.GeneratedProtocolMessageType('Value', (_message.Message,), dict(
    DESCRIPTOR = _FILTER_VALUE,
    __module__ = 'router_pb2'
    # @@protoc_insertion_point(class_scope:Filter.Value)
    ))
  ,

  ComponentValue = _reflection.GeneratedProtocolMessageType('ComponentValue', (_message.Message,), dict(

    ValueEntry = _reflection.GeneratedProtocolMessageType('ValueEntry', (_message.Message,), dict(
      DESCRIPTOR = _FILTER_COMPONENTVALUE_VALUEENTRY,
      __module__ = 'router_pb2'
      # @@protoc_insertion_point(class_scope:Filter.ComponentValue.ValueEntry)
      ))
    ,
    DESCRIPTOR = _FILTER_COMPONENTVALUE,
    __module__ = 'router_pb2'
    # @@protoc_insertion_point(class_scope:Filter.ComponentValue)
    ))
  ,

  MultiValue = _reflection.GeneratedProtocolMessageType('MultiValue', (_message.Message,), dict(
    DESCRIPTOR = _FILTER_MULTIVALUE,
    __module__ = 'router_pb2'
    # @@protoc_insertion_point(class_scope:Filter.MultiValue)
    ))
  ,
  DESCRIPTOR = _FILTER,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:Filter)
  ))
_sym_db.RegisterMessage(Filter)
_sym_db.RegisterMessage(Filter.Value)
_sym_db.RegisterMessage(Filter.ComponentValue)
_sym_db.RegisterMessage(Filter.ComponentValue.ValueEntry)
_sym_db.RegisterMessage(Filter.MultiValue)

PublishRequest = _reflection.GeneratedProtocolMessageType('PublishRequest', (_message.Message,), dict(
  DESCRIPTOR = _PUBLISHREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:PublishRequest)
  ))
_sym_db.RegisterMessage(PublishRequest)

DatasetsRequest = _reflection.GeneratedProtocolMessageType('DatasetsRequest', (_message.Message,), dict(
  DESCRIPTOR = _DATASETSREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:DatasetsRequest)
  ))
_sym_db.RegisterMessage(DatasetsRequest)

DatasetsResponse = _reflection.GeneratedProtocolMessageType('DatasetsResponse', (_message.Message,), dict(
  DESCRIPTOR = _DATASETSRESPONSE,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:DatasetsResponse)
  ))
_sym_db.RegisterMessage(DatasetsResponse)

CreateDatasetRequest = _reflection.GeneratedProtocolMessageType('CreateDatasetRequest', (_message.Message,), dict(
  DESCRIPTOR = _CREATEDATASETREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:CreateDatasetRequest)
  ))
_sym_db.RegisterMessage(CreateDatasetRequest)

SetPermissionRequest = _reflection.GeneratedProtocolMessageType('SetPermissionRequest', (_message.Message,), dict(

  PathPerm = _reflection.GeneratedProtocolMessageType('PathPerm', (_message.Message,), dict(
    DESCRIPTOR = _SETPERMISSIONREQUEST_PATHPERM,
    __module__ = 'router_pb2'
    # @@protoc_insertion_point(class_scope:SetPermissionRequest.PathPerm)
    ))
  ,
  DESCRIPTOR = _SETPERMISSIONREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:SetPermissionRequest)
  ))
_sym_db.RegisterMessage(SetPermissionRequest)
_sym_db.RegisterMessage(SetPermissionRequest.PathPerm)

PermissionSet = _reflection.GeneratedProtocolMessageType('PermissionSet', (_message.Message,), dict(
  DESCRIPTOR = _PERMISSIONSET,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:PermissionSet)
  ))
_sym_db.RegisterMessage(PermissionSet)

ClusterDescription = _reflection.GeneratedProtocolMessageType('ClusterDescription', (_message.Message,), dict(
  DESCRIPTOR = _CLUSTERDESCRIPTION,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:ClusterDescription)
  ))
_sym_db.RegisterMessage(ClusterDescription)

SetPasswordRequest = _reflection.GeneratedProtocolMessageType('SetPasswordRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETPASSWORDREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:SetPasswordRequest)
  ))
_sym_db.RegisterMessage(SetPasswordRequest)

CreateSessionRequest = _reflection.GeneratedProtocolMessageType('CreateSessionRequest', (_message.Message,), dict(
  DESCRIPTOR = _CREATESESSIONREQUEST,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:CreateSessionRequest)
  ))
_sym_db.RegisterMessage(CreateSessionRequest)

CreateSessionResponse = _reflection.GeneratedProtocolMessageType('CreateSessionResponse', (_message.Message,), dict(
  DESCRIPTOR = _CREATESESSIONRESPONSE,
  __module__ = 'router_pb2'
  # @@protoc_insertion_point(class_scope:CreateSessionResponse)
  ))
_sym_db.RegisterMessage(CreateSessionResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\003gen'))
_FILTER_COMPONENTVALUE_VALUEENTRY.has_options = True
_FILTER_COMPONENTVALUE_VALUEENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))

_ROUTERV1 = _descriptor.ServiceDescriptor(
  name='RouterV1',
  full_name='RouterV1',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=2764,
  serialized_end=3042,
  methods=[
  _descriptor.MethodDescriptor(
    name='Publish',
    full_name='RouterV1.Publish',
    index=0,
    containing_service=None,
    input_type=_PUBLISHREQUEST,
    output_type=google_dot_protobuf_dot_empty__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='Subscribe',
    full_name='RouterV1.Subscribe',
    index=1,
    containing_service=None,
    input_type=_SUBSCRIBEREQUEST,
    output_type=notification__pb2._NOTIFICATIONBATCH,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='Get',
    full_name='RouterV1.Get',
    index=2,
    containing_service=None,
    input_type=_GETREQUEST,
    output_type=notification__pb2._NOTIFICATIONBATCH,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetAndSubscribe',
    full_name='RouterV1.GetAndSubscribe',
    index=3,
    containing_service=None,
    input_type=_GETANDSUBSCRIBEREQUEST,
    output_type=notification__pb2._NOTIFICATIONBATCH,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetDatasets',
    full_name='RouterV1.GetDatasets',
    index=4,
    containing_service=None,
    input_type=_DATASETSREQUEST,
    output_type=_DATASETSRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_ROUTERV1)

DESCRIPTOR.services_by_name['RouterV1'] = _ROUTERV1


_AUTH = _descriptor.ServiceDescriptor(
  name='Auth',
  full_name='Auth',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=3045,
  serialized_end=3356,
  methods=[
  _descriptor.MethodDescriptor(
    name='CreateDataset',
    full_name='Auth.CreateDataset',
    index=0,
    containing_service=None,
    input_type=_CREATEDATASETREQUEST,
    output_type=google_dot_protobuf_dot_empty__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='SetPermission',
    full_name='Auth.SetPermission',
    index=1,
    containing_service=None,
    input_type=_SETPERMISSIONREQUEST,
    output_type=google_dot_protobuf_dot_empty__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetPermissionSet',
    full_name='Auth.GetPermissionSet',
    index=2,
    containing_service=None,
    input_type=_GETREQUEST,
    output_type=_PERMISSIONSET,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='SetPassword',
    full_name='Auth.SetPassword',
    index=3,
    containing_service=None,
    input_type=_SETPASSWORDREQUEST,
    output_type=google_dot_protobuf_dot_empty__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='CreateSession',
    full_name='Auth.CreateSession',
    index=4,
    containing_service=None,
    input_type=_CREATESESSIONREQUEST,
    output_type=_CREATESESSIONRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_AUTH)

DESCRIPTOR.services_by_name['Auth'] = _AUTH


_ALPHA = _descriptor.ServiceDescriptor(
  name='Alpha',
  full_name='Alpha',
  file=DESCRIPTOR,
  index=2,
  options=None,
  serialized_start=3358,
  serialized_end=3470,
  methods=[
  _descriptor.MethodDescriptor(
    name='Search',
    full_name='Alpha.Search',
    index=0,
    containing_service=None,
    input_type=_SEARCHREQUEST,
    output_type=notification__pb2._NOTIFICATIONBATCH,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='SearchSubscribe',
    full_name='Alpha.SearchSubscribe',
    index=1,
    containing_service=None,
    input_type=_SEARCHREQUEST,
    output_type=notification__pb2._NOTIFICATIONBATCH,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_ALPHA)

DESCRIPTOR.services_by_name['Alpha'] = _ALPHA


_CLUSTER = _descriptor.ServiceDescriptor(
  name='Cluster',
  full_name='Cluster',
  file=DESCRIPTOR,
  index=3,
  options=None,
  serialized_start=3472,
  serialized_end=3543,
  methods=[
  _descriptor.MethodDescriptor(
    name='ClusterInfo',
    full_name='Cluster.ClusterInfo',
    index=0,
    containing_service=None,
    input_type=google_dot_protobuf_dot_empty__pb2._EMPTY,
    output_type=_CLUSTERDESCRIPTION,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_CLUSTER)

DESCRIPTOR.services_by_name['Cluster'] = _CLUSTER

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class RouterV1Stub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Publish = channel.unary_unary(
          '/RouterV1/Publish',
          request_serializer=PublishRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.Subscribe = channel.unary_stream(
          '/RouterV1/Subscribe',
          request_serializer=SubscribeRequest.SerializeToString,
          response_deserializer=notification__pb2.NotificationBatch.FromString,
          )
      self.Get = channel.unary_stream(
          '/RouterV1/Get',
          request_serializer=GetRequest.SerializeToString,
          response_deserializer=notification__pb2.NotificationBatch.FromString,
          )
      self.GetAndSubscribe = channel.unary_stream(
          '/RouterV1/GetAndSubscribe',
          request_serializer=GetAndSubscribeRequest.SerializeToString,
          response_deserializer=notification__pb2.NotificationBatch.FromString,
          )
      self.GetDatasets = channel.unary_stream(
          '/RouterV1/GetDatasets',
          request_serializer=DatasetsRequest.SerializeToString,
          response_deserializer=DatasetsResponse.FromString,
          )


  class RouterV1Servicer(object):
    # missing associated documentation comment in .proto file
    pass

    def Publish(self, request, context):
      """Publish is used to send notifications to CloudVision.
      They will be saved into the storage and sent to all
      the clients subscribing to the same device/path.

      * Publish guarantees atomicity of the data saved per {timestamp+path+key}.
      For Notification => For one Notification having multiple keys,
      each key is ensured to be saved atomically
      but atomicity is not guaranteed for the entire notification.
      For NotificationBatch =>  if Notif[1] and Notif[5]
      both have updates for a {timestamp+path+key}
      either the update of Notif[1] will be saved, or the update of Notif[5] will be saved.
      The value will be one or the other, not a corrupted combination of both requests.

      * There is no guarantee for write order within a single publish request.
      When sending multiple notifications where multiple notification will have
      the same timestamp, path and keys,
      Publish does not guarantee that Notif[1] will be processed before Notif[5]
      This means that for two notifications in the same Publish call having the
      same {timestamp+path+key}, the result is undefined and will randomly vary
      (i.e. the first notif data will be saved, or the second one).
      The client must send two synchronous Publish requests to guarantee
      the write order at which the requests are processed.

      * Publish is asynchronous by default:
      When the call to Publish ends without error, it means the data has been
      correctly received by CloudVision but not stored yet.
      So, if a "get" call is done right after the Publish call, the get might
      not return the data just published.
      When the "sync" field is set to true in PublishRequest, the Publish
      will be synchronous:
      When the call to Publish ends without error, it means the data has been
      correctly received AND stored by CloudVision.
      So, if a "get" call is done right after the synchronous Publish call, the get will
      return the data just published (unless someone else stored more recent data of course).

      * Client-side and Server-side timestamping:
      The notification object has a timestamp that can be populated by the client.
      In case the Client sends a notification with a "null" timestamp as the
      Notification.timestamp field, the server will populate the timestamp with
      the current time of the node with the server process is running.
      This "current time" will be queried once at the beginning of the Publish request
      and will be used as the Notification.timestamp for all the notification having this field
      as null.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
      """Subscribe allows the client to request a live stream of updates
      (V1: either based on regexp or exact match, V2: based on exact match)

      There is no order guarantee for batches received by subscribers.
      It means that two batches A and B published synchronously (B is published after A)
      the subscribers can receive batch A first or B second, OR batch B first and A second.
      This is also true for notifications within a batch.
      The backend can decide to split a batch and reorder notifications so subscribers
      might receive notifications within a batch in a different order that they were published.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
      """Get is used to request notifications for a given path over a specified time range.
      Wildcards are supported with Get requests, but when given a range of time the server
      will resolve all wildcard paths at the starting timestamp of the given range, so any
      pointers and/or paths that are created after the given start timestamp will not be
      accounted for during wildcard resolution.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetAndSubscribe(self, request, context):
      """GetAndSubscribe allows the client to issue one request to do both Get and Subscribe requests.
      The server will first send a mix of subscribe and get batches, and there's no distinction
      between which batches are subscribe or get batches. Then the server will send a sync signal
      signaling that the Get stream has finished. After that, server will stream out only subscribe
      batches. There's no order guarantee for batches received by client.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetDatasets(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_RouterV1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Publish': grpc.unary_unary_rpc_method_handler(
            servicer.Publish,
            request_deserializer=PublishRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'Subscribe': grpc.unary_stream_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=SubscribeRequest.FromString,
            response_serializer=notification__pb2.NotificationBatch.SerializeToString,
        ),
        'Get': grpc.unary_stream_rpc_method_handler(
            servicer.Get,
            request_deserializer=GetRequest.FromString,
            response_serializer=notification__pb2.NotificationBatch.SerializeToString,
        ),
        'GetAndSubscribe': grpc.unary_stream_rpc_method_handler(
            servicer.GetAndSubscribe,
            request_deserializer=GetAndSubscribeRequest.FromString,
            response_serializer=notification__pb2.NotificationBatch.SerializeToString,
        ),
        'GetDatasets': grpc.unary_stream_rpc_method_handler(
            servicer.GetDatasets,
            request_deserializer=DatasetsRequest.FromString,
            response_serializer=DatasetsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'RouterV1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class AuthStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.CreateDataset = channel.unary_unary(
          '/Auth/CreateDataset',
          request_serializer=CreateDatasetRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.SetPermission = channel.unary_unary(
          '/Auth/SetPermission',
          request_serializer=SetPermissionRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.GetPermissionSet = channel.unary_stream(
          '/Auth/GetPermissionSet',
          request_serializer=GetRequest.SerializeToString,
          response_deserializer=PermissionSet.FromString,
          )
      self.SetPassword = channel.unary_unary(
          '/Auth/SetPassword',
          request_serializer=SetPasswordRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.CreateSession = channel.unary_stream(
          '/Auth/CreateSession',
          request_serializer=CreateSessionRequest.SerializeToString,
          response_deserializer=CreateSessionResponse.FromString,
          )


  class AuthServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def CreateDataset(self, request, context):
      """CreateDataset from a given Dataset wrapped in a CreateDatasetRequest
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetPermission(self, request, context):
      """SetPermission sets a permission for a dataset using a SetPermissionRequest.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPermissionSet(self, request, context):
      """GetPermissionSet returns the set of all permissions present for the datasets specified
      in the 'query'(s) of the GetRequest.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetPassword(self, request, context):
      """SetPassword sets the password for a user.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
      """CreateSession creates session for user
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'CreateDataset': grpc.unary_unary_rpc_method_handler(
            servicer.CreateDataset,
            request_deserializer=CreateDatasetRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetPermission': grpc.unary_unary_rpc_method_handler(
            servicer.SetPermission,
            request_deserializer=SetPermissionRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetPermissionSet': grpc.unary_stream_rpc_method_handler(
            servicer.GetPermissionSet,
            request_deserializer=GetRequest.FromString,
            response_serializer=PermissionSet.SerializeToString,
        ),
        'SetPassword': grpc.unary_unary_rpc_method_handler(
            servicer.SetPassword,
            request_deserializer=SetPasswordRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'CreateSession': grpc.unary_stream_rpc_method_handler(
            servicer.CreateSession,
            request_deserializer=CreateSessionRequest.FromString,
            response_serializer=CreateSessionResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class AlphaStub(object):
    """Alpha services are services which are not supported and
    can be added/removed/changed anytime, without notice.
    Clients should not user them and build applications on top of this service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Search = channel.unary_stream(
          '/Alpha/Search',
          request_serializer=SearchRequest.SerializeToString,
          response_deserializer=notification__pb2.NotificationBatch.FromString,
          )
      self.SearchSubscribe = channel.unary_stream(
          '/Alpha/SearchSubscribe',
          request_serializer=SearchRequest.SerializeToString,
          response_deserializer=notification__pb2.NotificationBatch.FromString,
          )


  class AlphaServicer(object):
    """Alpha services are services which are not supported and
    can be added/removed/changed anytime, without notice.
    Clients should not user them and build applications on top of this service
    """

    def Search(self, request, context):
      """you know, for search...
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SearchSubscribe(self, request, context):
      """SearchSubscribe allows the client to request a live stream of updates
      based on client search request
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AlphaServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Search': grpc.unary_stream_rpc_method_handler(
            servicer.Search,
            request_deserializer=SearchRequest.FromString,
            response_serializer=notification__pb2.NotificationBatch.SerializeToString,
        ),
        'SearchSubscribe': grpc.unary_stream_rpc_method_handler(
            servicer.SearchSubscribe,
            request_deserializer=SearchRequest.FromString,
            response_serializer=notification__pb2.NotificationBatch.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Alpha', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class ClusterStub(object):
    """Cluster service gives some descriptions about the cluster where the service
    is running.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ClusterInfo = channel.unary_stream(
          '/Cluster/ClusterInfo',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=ClusterDescription.FromString,
          )


  class ClusterServicer(object):
    """Cluster service gives some descriptions about the cluster where the service
    is running.
    """

    def ClusterInfo(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ClusterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ClusterInfo': grpc.unary_stream_rpc_method_handler(
            servicer.ClusterInfo,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=ClusterDescription.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Cluster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaRouterV1Servicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def Publish(self, request, context):
      """Publish is used to send notifications to CloudVision.
      They will be saved into the storage and sent to all
      the clients subscribing to the same device/path.

      * Publish guarantees atomicity of the data saved per {timestamp+path+key}.
      For Notification => For one Notification having multiple keys,
      each key is ensured to be saved atomically
      but atomicity is not guaranteed for the entire notification.
      For NotificationBatch =>  if Notif[1] and Notif[5]
      both have updates for a {timestamp+path+key}
      either the update of Notif[1] will be saved, or the update of Notif[5] will be saved.
      The value will be one or the other, not a corrupted combination of both requests.

      * There is no guarantee for write order within a single publish request.
      When sending multiple notifications where multiple notification will have
      the same timestamp, path and keys,
      Publish does not guarantee that Notif[1] will be processed before Notif[5]
      This means that for two notifications in the same Publish call having the
      same {timestamp+path+key}, the result is undefined and will randomly vary
      (i.e. the first notif data will be saved, or the second one).
      The client must send two synchronous Publish requests to guarantee
      the write order at which the requests are processed.

      * Publish is asynchronous by default:
      When the call to Publish ends without error, it means the data has been
      correctly received by CloudVision but not stored yet.
      So, if a "get" call is done right after the Publish call, the get might
      not return the data just published.
      When the "sync" field is set to true in PublishRequest, the Publish
      will be synchronous:
      When the call to Publish ends without error, it means the data has been
      correctly received AND stored by CloudVision.
      So, if a "get" call is done right after the synchronous Publish call, the get will
      return the data just published (unless someone else stored more recent data of course).

      * Client-side and Server-side timestamping:
      The notification object has a timestamp that can be populated by the client.
      In case the Client sends a notification with a "null" timestamp as the
      Notification.timestamp field, the server will populate the timestamp with
      the current time of the node with the server process is running.
      This "current time" will be queried once at the beginning of the Publish request
      and will be used as the Notification.timestamp for all the notification having this field
      as null.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Subscribe(self, request, context):
      """Subscribe allows the client to request a live stream of updates
      (V1: either based on regexp or exact match, V2: based on exact match)

      There is no order guarantee for batches received by subscribers.
      It means that two batches A and B published synchronously (B is published after A)
      the subscribers can receive batch A first or B second, OR batch B first and A second.
      This is also true for notifications within a batch.
      The backend can decide to split a batch and reorder notifications so subscribers
      might receive notifications within a batch in a different order that they were published.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Get(self, request, context):
      """Get is used to request notifications for a given path over a specified time range.
      Wildcards are supported with Get requests, but when given a range of time the server
      will resolve all wildcard paths at the starting timestamp of the given range, so any
      pointers and/or paths that are created after the given start timestamp will not be
      accounted for during wildcard resolution.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetAndSubscribe(self, request, context):
      """GetAndSubscribe allows the client to issue one request to do both Get and Subscribe requests.
      The server will first send a mix of subscribe and get batches, and there's no distinction
      between which batches are subscribe or get batches. Then the server will send a sync signal
      signaling that the Get stream has finished. After that, server will stream out only subscribe
      batches. There's no order guarantee for batches received by client.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetDatasets(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaRouterV1Stub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def Publish(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Publish is used to send notifications to CloudVision.
      They will be saved into the storage and sent to all
      the clients subscribing to the same device/path.

      * Publish guarantees atomicity of the data saved per {timestamp+path+key}.
      For Notification => For one Notification having multiple keys,
      each key is ensured to be saved atomically
      but atomicity is not guaranteed for the entire notification.
      For NotificationBatch =>  if Notif[1] and Notif[5]
      both have updates for a {timestamp+path+key}
      either the update of Notif[1] will be saved, or the update of Notif[5] will be saved.
      The value will be one or the other, not a corrupted combination of both requests.

      * There is no guarantee for write order within a single publish request.
      When sending multiple notifications where multiple notification will have
      the same timestamp, path and keys,
      Publish does not guarantee that Notif[1] will be processed before Notif[5]
      This means that for two notifications in the same Publish call having the
      same {timestamp+path+key}, the result is undefined and will randomly vary
      (i.e. the first notif data will be saved, or the second one).
      The client must send two synchronous Publish requests to guarantee
      the write order at which the requests are processed.

      * Publish is asynchronous by default:
      When the call to Publish ends without error, it means the data has been
      correctly received by CloudVision but not stored yet.
      So, if a "get" call is done right after the Publish call, the get might
      not return the data just published.
      When the "sync" field is set to true in PublishRequest, the Publish
      will be synchronous:
      When the call to Publish ends without error, it means the data has been
      correctly received AND stored by CloudVision.
      So, if a "get" call is done right after the synchronous Publish call, the get will
      return the data just published (unless someone else stored more recent data of course).

      * Client-side and Server-side timestamping:
      The notification object has a timestamp that can be populated by the client.
      In case the Client sends a notification with a "null" timestamp as the
      Notification.timestamp field, the server will populate the timestamp with
      the current time of the node with the server process is running.
      This "current time" will be queried once at the beginning of the Publish request
      and will be used as the Notification.timestamp for all the notification having this field
      as null.
      """
      raise NotImplementedError()
    Publish.future = None
    def Subscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Subscribe allows the client to request a live stream of updates
      (V1: either based on regexp or exact match, V2: based on exact match)

      There is no order guarantee for batches received by subscribers.
      It means that two batches A and B published synchronously (B is published after A)
      the subscribers can receive batch A first or B second, OR batch B first and A second.
      This is also true for notifications within a batch.
      The backend can decide to split a batch and reorder notifications so subscribers
      might receive notifications within a batch in a different order that they were published.
      """
      raise NotImplementedError()
    def Get(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get is used to request notifications for a given path over a specified time range.
      Wildcards are supported with Get requests, but when given a range of time the server
      will resolve all wildcard paths at the starting timestamp of the given range, so any
      pointers and/or paths that are created after the given start timestamp will not be
      accounted for during wildcard resolution.
      """
      raise NotImplementedError()
    def GetAndSubscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """GetAndSubscribe allows the client to issue one request to do both Get and Subscribe requests.
      The server will first send a mix of subscribe and get batches, and there's no distinction
      between which batches are subscribe or get batches. Then the server will send a sync signal
      signaling that the Get stream has finished. After that, server will stream out only subscribe
      batches. There's no order guarantee for batches received by client.
      """
      raise NotImplementedError()
    def GetDatasets(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()


  def beta_create_RouterV1_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('RouterV1', 'Get'): GetRequest.FromString,
      ('RouterV1', 'GetAndSubscribe'): GetAndSubscribeRequest.FromString,
      ('RouterV1', 'GetDatasets'): DatasetsRequest.FromString,
      ('RouterV1', 'Publish'): PublishRequest.FromString,
      ('RouterV1', 'Subscribe'): SubscribeRequest.FromString,
    }
    response_serializers = {
      ('RouterV1', 'Get'): notification__pb2.NotificationBatch.SerializeToString,
      ('RouterV1', 'GetAndSubscribe'): notification__pb2.NotificationBatch.SerializeToString,
      ('RouterV1', 'GetDatasets'): DatasetsResponse.SerializeToString,
      ('RouterV1', 'Publish'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('RouterV1', 'Subscribe'): notification__pb2.NotificationBatch.SerializeToString,
    }
    method_implementations = {
      ('RouterV1', 'Get'): face_utilities.unary_stream_inline(servicer.Get),
      ('RouterV1', 'GetAndSubscribe'): face_utilities.unary_stream_inline(servicer.GetAndSubscribe),
      ('RouterV1', 'GetDatasets'): face_utilities.unary_stream_inline(servicer.GetDatasets),
      ('RouterV1', 'Publish'): face_utilities.unary_unary_inline(servicer.Publish),
      ('RouterV1', 'Subscribe'): face_utilities.unary_stream_inline(servicer.Subscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_RouterV1_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('RouterV1', 'Get'): GetRequest.SerializeToString,
      ('RouterV1', 'GetAndSubscribe'): GetAndSubscribeRequest.SerializeToString,
      ('RouterV1', 'GetDatasets'): DatasetsRequest.SerializeToString,
      ('RouterV1', 'Publish'): PublishRequest.SerializeToString,
      ('RouterV1', 'Subscribe'): SubscribeRequest.SerializeToString,
    }
    response_deserializers = {
      ('RouterV1', 'Get'): notification__pb2.NotificationBatch.FromString,
      ('RouterV1', 'GetAndSubscribe'): notification__pb2.NotificationBatch.FromString,
      ('RouterV1', 'GetDatasets'): DatasetsResponse.FromString,
      ('RouterV1', 'Publish'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('RouterV1', 'Subscribe'): notification__pb2.NotificationBatch.FromString,
    }
    cardinalities = {
      'Get': cardinality.Cardinality.UNARY_STREAM,
      'GetAndSubscribe': cardinality.Cardinality.UNARY_STREAM,
      'GetDatasets': cardinality.Cardinality.UNARY_STREAM,
      'Publish': cardinality.Cardinality.UNARY_UNARY,
      'Subscribe': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'RouterV1', cardinalities, options=stub_options)


  class BetaAuthServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def CreateDataset(self, request, context):
      """CreateDataset from a given Dataset wrapped in a CreateDatasetRequest
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetPermission(self, request, context):
      """SetPermission sets a permission for a dataset using a SetPermissionRequest.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPermissionSet(self, request, context):
      """GetPermissionSet returns the set of all permissions present for the datasets specified
      in the 'query'(s) of the GetRequest.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetPassword(self, request, context):
      """SetPassword sets the password for a user.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateSession(self, request, context):
      """CreateSession creates session for user
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAuthStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def CreateDataset(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """CreateDataset from a given Dataset wrapped in a CreateDatasetRequest
      """
      raise NotImplementedError()
    CreateDataset.future = None
    def SetPermission(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """SetPermission sets a permission for a dataset using a SetPermissionRequest.
      """
      raise NotImplementedError()
    SetPermission.future = None
    def GetPermissionSet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """GetPermissionSet returns the set of all permissions present for the datasets specified
      in the 'query'(s) of the GetRequest.
      """
      raise NotImplementedError()
    def SetPassword(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """SetPassword sets the password for a user.
      """
      raise NotImplementedError()
    SetPassword.future = None
    def CreateSession(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """CreateSession creates session for user
      """
      raise NotImplementedError()


  def beta_create_Auth_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Auth', 'CreateDataset'): CreateDatasetRequest.FromString,
      ('Auth', 'CreateSession'): CreateSessionRequest.FromString,
      ('Auth', 'GetPermissionSet'): GetRequest.FromString,
      ('Auth', 'SetPassword'): SetPasswordRequest.FromString,
      ('Auth', 'SetPermission'): SetPermissionRequest.FromString,
    }
    response_serializers = {
      ('Auth', 'CreateDataset'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('Auth', 'CreateSession'): CreateSessionResponse.SerializeToString,
      ('Auth', 'GetPermissionSet'): PermissionSet.SerializeToString,
      ('Auth', 'SetPassword'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('Auth', 'SetPermission'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
    }
    method_implementations = {
      ('Auth', 'CreateDataset'): face_utilities.unary_unary_inline(servicer.CreateDataset),
      ('Auth', 'CreateSession'): face_utilities.unary_stream_inline(servicer.CreateSession),
      ('Auth', 'GetPermissionSet'): face_utilities.unary_stream_inline(servicer.GetPermissionSet),
      ('Auth', 'SetPassword'): face_utilities.unary_unary_inline(servicer.SetPassword),
      ('Auth', 'SetPermission'): face_utilities.unary_unary_inline(servicer.SetPermission),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Auth_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Auth', 'CreateDataset'): CreateDatasetRequest.SerializeToString,
      ('Auth', 'CreateSession'): CreateSessionRequest.SerializeToString,
      ('Auth', 'GetPermissionSet'): GetRequest.SerializeToString,
      ('Auth', 'SetPassword'): SetPasswordRequest.SerializeToString,
      ('Auth', 'SetPermission'): SetPermissionRequest.SerializeToString,
    }
    response_deserializers = {
      ('Auth', 'CreateDataset'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('Auth', 'CreateSession'): CreateSessionResponse.FromString,
      ('Auth', 'GetPermissionSet'): PermissionSet.FromString,
      ('Auth', 'SetPassword'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('Auth', 'SetPermission'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
    }
    cardinalities = {
      'CreateDataset': cardinality.Cardinality.UNARY_UNARY,
      'CreateSession': cardinality.Cardinality.UNARY_STREAM,
      'GetPermissionSet': cardinality.Cardinality.UNARY_STREAM,
      'SetPassword': cardinality.Cardinality.UNARY_UNARY,
      'SetPermission': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Auth', cardinalities, options=stub_options)


  class BetaAlphaServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Alpha services are services which are not supported and
    can be added/removed/changed anytime, without notice.
    Clients should not user them and build applications on top of this service
    """
    def Search(self, request, context):
      """you know, for search...
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SearchSubscribe(self, request, context):
      """SearchSubscribe allows the client to request a live stream of updates
      based on client search request
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAlphaStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Alpha services are services which are not supported and
    can be added/removed/changed anytime, without notice.
    Clients should not user them and build applications on top of this service
    """
    def Search(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """you know, for search...
      """
      raise NotImplementedError()
    def SearchSubscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """SearchSubscribe allows the client to request a live stream of updates
      based on client search request
      """
      raise NotImplementedError()


  def beta_create_Alpha_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Alpha', 'Search'): SearchRequest.FromString,
      ('Alpha', 'SearchSubscribe'): SearchRequest.FromString,
    }
    response_serializers = {
      ('Alpha', 'Search'): notification__pb2.NotificationBatch.SerializeToString,
      ('Alpha', 'SearchSubscribe'): notification__pb2.NotificationBatch.SerializeToString,
    }
    method_implementations = {
      ('Alpha', 'Search'): face_utilities.unary_stream_inline(servicer.Search),
      ('Alpha', 'SearchSubscribe'): face_utilities.unary_stream_inline(servicer.SearchSubscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Alpha_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Alpha', 'Search'): SearchRequest.SerializeToString,
      ('Alpha', 'SearchSubscribe'): SearchRequest.SerializeToString,
    }
    response_deserializers = {
      ('Alpha', 'Search'): notification__pb2.NotificationBatch.FromString,
      ('Alpha', 'SearchSubscribe'): notification__pb2.NotificationBatch.FromString,
    }
    cardinalities = {
      'Search': cardinality.Cardinality.UNARY_STREAM,
      'SearchSubscribe': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Alpha', cardinalities, options=stub_options)


  class BetaClusterServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Cluster service gives some descriptions about the cluster where the service
    is running.
    """
    def ClusterInfo(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaClusterStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Cluster service gives some descriptions about the cluster where the service
    is running.
    """
    def ClusterInfo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()


  def beta_create_Cluster_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Cluster', 'ClusterInfo'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
    }
    response_serializers = {
      ('Cluster', 'ClusterInfo'): ClusterDescription.SerializeToString,
    }
    method_implementations = {
      ('Cluster', 'ClusterInfo'): face_utilities.unary_stream_inline(servicer.ClusterInfo),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Cluster_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Cluster', 'ClusterInfo'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
    }
    response_deserializers = {
      ('Cluster', 'ClusterInfo'): ClusterDescription.FromString,
    }
    cardinalities = {
      'ClusterInfo': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Cluster', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
